{
    "name": "grouped-tools",
    "fixtures": {
        "list": {
            "tools": {
                "sbg-oliver/snpEff": [
                    {
                        "_id": "54c125b7769d661722c3d003",
                        "name": "snpeff_download",
                        "repo": {
                            "__v": 0,
                            "_id": "54b7d6399d7038e10b79160c",
                            "created_by": "sbg-oliver",
                            "description": "",
                            "git": false,
                            "name": "snpEff",
                            "owner": "sbg-oliver",
                            "secret": "4f09aa47-f803-4ad4-b8e5-479f43c19aba",
                            "user": "549c1fabc94802d836b6fc9c",
                            "is_public": true
                        },
                        "user": "549c1fabc94802d836b6fc9c",
                        "is_script": false,
                        "revisions": [
                            {
                                "app_id": "54c125b7769d661722c3d003",
                                "job": "{\"inputs\":{\"database_name\":\"GRCh37.75\"},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"snpeff_download\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\"\",\"value\":\"download\",\"prefix\":\"\",\"order\":1},{\"separator\":\"\",\"value\":\"v\",\"prefix\":\"-\",\"order\":2}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /opt/snpEff_v3_6/snpEff.jar\"]},\"outputs\":{\"properties\":{\"database\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  prefix = \\\"snpEff_v3_6_\\\"\\n  database_name = $job.inputs.database_name\\n  \\n  return prefix.concat(database_name).concat(\\\".zip\\\")\\n}\"},\"metadata\":{\"file_type\":\"archive\"}},\"type\":\"file\"}},\"required\":[],\"type\":\"object\"},\"inputs\":{\"properties\":{\"database_name\":{\"adapter\":{\"order\":3,\"prefix\":\"\"},\"type\":\"string\"}},\"required\":[\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"7441fc6c06fc\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"type\":\"docker\"}}},\"documentAuthor\":\"oliver.bradonjic@sbgenomics.com\"}",
                                "author": "oliver.bradonjic@sbgenomics.com",
                                "description": "",
                                "name": "snpeff_download",
                                "_id": "54c239d8d46a7b82076b155c",
                                "__v": 0,
                                "version": 5
                            },
                            {
                                "app_id": "54c125b7769d661722c3d003",
                                "job": "{\"inputs\":{\"database_name\":\"GRCh37.75\"},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"snpeff_download\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"oliver.bradonjic@sbgenomics.com\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"imageId\":\"7441fc6c06fc\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"database_name\"],\"properties\":{\"database_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"\",\"order\":3}}}},\"outputs\":{\"type\":\"object\",\"required\":[],\"properties\":{\"database\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"archive\"},\"glob\":{\"$expr\":\"{\\t\\n  prefix = \\\"snpEff_v3_6_\\\"\\n  database_name = $job.inputs.database_name\\n  \\n  return prefix.concat(database_name).concat(\\\".zip\\\")\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /opt/snpEff_v3_6/snpEff.jar\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"prefix\":\"\",\"value\":\"download\",\"separator\":\"\"},{\"order\":2,\"prefix\":\"-\",\"value\":\"v\",\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "oliver.bradonjic@sbgenomics.com",
                                "description": "",
                                "name": "snpeff_download",
                                "_id": "54c12af5769d661722c3d00a",
                                "__v": 0,
                                "version": 4
                            },
                            {
                                "app_id": "54c125b7769d661722c3d003",
                                "job": "{\"inputs\":{\"database_name\":\"GRCh37.75\"},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"snpeff_download\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\"\",\"value\":\"download\",\"prefix\":\"\",\"order\":1},{\"separator\":\"\",\"value\":\"v\",\"prefix\":\"-\",\"order\":2}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /opt/snpEff_v3_6/snpEff.jar\"]},\"outputs\":{\"properties\":{\"database\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  prefix = \\\"snpEff_v3_6_\\\"\\n  database_name = $job.inputs.database_name\\n  \\n  return prefix.concat(database_name).concat(\\\".zip\\\")\\n}\"},\"metadata\":{\"file_type\":\"archive\"}},\"type\":\"file\"}},\"required\":[],\"type\":\"object\"},\"inputs\":{\"properties\":{\"database_name\":{\"adapter\":{\"order\":3,\"prefix\":\"\"},\"type\":\"string\"}},\"required\":[\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"7441fc6c06fc\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"type\":\"docker\"}}},\"documentAuthor\":\"oliver.bradonjic@sbgenomics.com\"}",
                                "author": "oliver.bradonjic@sbgenomics.com",
                                "description": "",
                                "name": "snpeff_download",
                                "_id": "54c12a73769d661722c3d009",
                                "__v": 0,
                                "version": 3
                            },
                            {
                                "app_id": "54c125b7769d661722c3d003",
                                "job": "{\"inputs\":{\"database_name\":\"GRCh37.75\"},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"snpeff_download\",\"description\":\"\",\"documentAuthor\":\"oliver.bradonjic@sbgenomics.com\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"imageId\":\"7441fc6c06fc\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"database_name\"],\"properties\":{\"database_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"download\",\"order\":1}}}},\"outputs\":{\"type\":\"object\",\"required\":[],\"properties\":{\"database\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"archive\"},\"glob\":{\"$expr\":\"{\\t\\n  prefix = \\\"snpEff_v3_6_\\\"\\n  database_name = $job.inputs.database_name\\n  \\n  return prefix.concat(database_name).concat(\\\".zip\\\")\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /opt/snpEff_v3_6/snpEff.jar -v\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "oliver.bradonjic@sbgenomics.com",
                                "description": "",
                                "name": "snpeff_download",
                                "_id": "54c12800769d661722c3d008",
                                "__v": 0,
                                "version": 2
                            },
                            {
                                "app_id": "54c125b7769d661722c3d003",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"spliceSiteSize\":2,\"database\":{\"path\":\"/path/to/database.zip\"},\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":false,\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"snpeff_download\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"\"],\"stdout\":\"\",\"args\":[]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"streamable\":false}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"--result_filter_\"},\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"--sequence_filter_\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--out_offset\",\"order\":122},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--in_offset\",\"order\":121},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--one_based\",\"order\":120},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--zero_based\",\"order\":119},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--up_down_stream_len\",\"order\":118},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":117,\"separator\":\"=\",\"prefix\":\"--splice_site_size\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--sequence_ontolgy\",\"order\":116},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--only_reg\",\"order\":115},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--oicr\",\"order\":114},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--reg\",\"order\":113},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--lof\",\"order\":112},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--hgvs\",\"order\":111},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--gene_id\",\"order\":110},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_coverage\",\"order\":107},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_coverage\",\"order\":106},\"type\":\"integer\"},\"max_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_qual\",\"order\":105},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_qual\",\"order\":104},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":103,\"prefix\":\"--csv_stats\"},\"type\":\"boolean\"},\"output_format\":{\"adapter\":{\"separator\":\"=\",\"order\":90,\"prefix\":\"--output_format\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"database\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--database\",\"order\":91}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--variants\",\"order\":92}}},\"required\":[\"input\",\"database_name\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"\",\"imageId\":\"\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff_download",
                                "_id": "54c125b7769d661722c3d004",
                                "__v": 0,
                                "version": 1
                            }
                        ]
                    },
                    {
                        "_id": "54b7d7499d7038e10b79160f",
                        "name": "snpeff",
                        "repo": {
                            "__v": 0,
                            "_id": "54b7d6399d7038e10b79160c",
                            "created_by": "sbg-oliver",
                            "description": "",
                            "git": false,
                            "name": "snpEff",
                            "owner": "sbg-oliver",
                            "secret": "4f09aa47-f803-4ad4-b8e5-479f43c19aba",
                            "user": "549c1fabc94802d836b6fc9c",
                            "is_public": true
                        },
                        "user": "549c1fabc94802d836b6fc9c",
                        "is_script": false,
                        "revisions": [
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":{\"path\":\"/path/to/database.zip\"},\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":false,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"streamable\":false}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"--result_filter_\"},\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"--sequence_filter_\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--out_offset\",\"order\":122},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--in_offset\",\"order\":121},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--one_based\",\"order\":120},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--zero_based\",\"order\":119},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--up_down_stream_len\",\"order\":118},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":117,\"separator\":\"=\",\"prefix\":\"--splice_site_size\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--sequence_ontolgy\",\"order\":116},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--only_reg\",\"order\":115},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--oicr\",\"order\":114},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--reg\",\"order\":113},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--lof\",\"order\":112},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--hgvs\",\"order\":111},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--gene_id\",\"order\":110},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--canon\",\"order\":109},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--cancer\",\"order\":108},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_coverage\",\"order\":107},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_coverage\",\"order\":106},\"type\":\"integer\"},\"max_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_qual\",\"order\":105},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_qual\",\"order\":104},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":103,\"prefix\":\"--csv_stats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"separator\":\"=\",\"order\":102,\"prefix\":\"--chr_name\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"separator\":\"=\",\"order\":90,\"prefix\":\"--output_format\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"separator\":\"=\",\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--database\",\"order\":91}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--variants\",\"order\":92}}},\"required\":[\"input\",\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"7441fc6c06fc\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c2494ed46a7b82076b155f",
                                "__v": 0,
                                "version": 36
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":{\"path\":\"/path/to/database.zip\"},\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":false,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"imageId\":\"7441fc6c06fc\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":92,\"prefix\":\"--variants\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":91,\"prefix\":\"--database\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100,\"separator\":\"=\"}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"--output_format\",\"order\":90,\"separator\":\"=\"}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--chr_name\",\"order\":102,\"separator\":\"=\"}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"--csv_stats\",\"order\":103}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":104,\"prefix\":\"--min_qual\",\"separator\":\"=\"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"--max_qual\",\"separator\":\"=\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"--min_coverage\",\"separator\":\"=\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":107,\"prefix\":\"--max_coverage\",\"separator\":\"=\"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":108,\"prefix\":\"--cancer\",\"separator\":\"\"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"--canon\",\"separator\":\"\"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"--gene_id\",\"separator\":\"\"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"--hgvs\",\"separator\":\"\"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"--lof\",\"separator\":\"\"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":113,\"prefix\":\"--reg\",\"separator\":\"=\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":114,\"prefix\":\"--oicr\",\"separator\":\"\"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"--only_reg\",\"separator\":\"\"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"--sequence_ontolgy\",\"separator\":\"\"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--splice_site_size\",\"separator\":\"=\",\"order\":117}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":118,\"prefix\":\"--up_down_stream_len\",\"separator\":\"=\"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":119,\"prefix\":\"--zero_based\",\"separator\":\"\"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"--one_based\",\"separator\":\"\"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":121,\"prefix\":\"--in_offset\",\"separator\":\"=\"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"--out_offset\",\"separator\":\"=\"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--sequence_filter_\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"adapter\":{\"prefix\":\"--result_filter_\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"streamable\":false,\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c23a32d46a7b82076b155d",
                                "__v": 0,
                                "version": 35
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":{\"path\":\"/path/to/database.zip\"},\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":false,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"streamable\":false}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.split('\\\\\\').pop().split('/').pop().split(\\\".\\\")[0];\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"--result_filter_\"},\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"--sequence_filter_\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--out_offset\",\"order\":122},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--in_offset\",\"order\":121},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--one_based\",\"order\":120},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--zero_based\",\"order\":119},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--up_down_stream_len\",\"order\":118},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":117,\"separator\":\"=\",\"prefix\":\"--splice_site_size\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--sequence_ontolgy\",\"order\":116},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--only_reg\",\"order\":115},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--oicr\",\"order\":114},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--reg\",\"order\":113},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--lof\",\"order\":112},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--hgvs\",\"order\":111},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--gene_id\",\"order\":110},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--canon\",\"order\":109},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--cancer\",\"order\":108},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_coverage\",\"order\":107},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_coverage\",\"order\":106},\"type\":\"integer\"},\"max_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_qual\",\"order\":105},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_qual\",\"order\":104},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":103,\"prefix\":\"--csv_stats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"separator\":\"=\",\"order\":102,\"prefix\":\"--chr_name\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"separator\":\"=\",\"order\":90,\"prefix\":\"--output_format\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"separator\":\"=\",\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--database\",\"order\":91}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--variants\",\"order\":92}}},\"required\":[\"input\",\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"7441fc6c06fc\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c23984d46a7b82076b155b",
                                "__v": 0,
                                "version": 34
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":{\"path\":\"/path/to/database.zip\"},\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":false,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"imageId\":\"7441fc6c06fc\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":92,\"prefix\":\"--variants\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":91,\"prefix\":\"--database\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100,\"separator\":\"=\"}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"--output_format\",\"order\":90,\"separator\":\"=\"}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--chr_name\",\"order\":102,\"separator\":\"=\"}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"--csv_stats\",\"order\":103}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":104,\"prefix\":\"--min_qual\",\"separator\":\"=\"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"--max_qual\",\"separator\":\"=\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"--min_coverage\",\"separator\":\"=\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":107,\"prefix\":\"--max_coverage\",\"separator\":\"=\"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":108,\"prefix\":\"--cancer\",\"separator\":\"\"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"--canon\",\"separator\":\"\"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"--gene_id\",\"separator\":\"\"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"--hgvs\",\"separator\":\"\"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"--lof\",\"separator\":\"\"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":113,\"prefix\":\"--reg\",\"separator\":\"=\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":114,\"prefix\":\"--oicr\",\"separator\":\"\"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"--only_reg\",\"separator\":\"\"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"--sequence_ontolgy\",\"separator\":\"\"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--splice_site_size\",\"separator\":\"=\",\"order\":117}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":118,\"prefix\":\"--up_down_stream_len\",\"separator\":\"=\"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":119,\"prefix\":\"--zero_based\",\"separator\":\"\"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"--one_based\",\"separator\":\"\"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":121,\"prefix\":\"--in_offset\",\"separator\":\"=\"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"--out_offset\",\"separator\":\"=\"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--sequence_filter_\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"adapter\":{\"prefix\":\"--result_filter_\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"streamable\":false,\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c12405769d661722c3d002",
                                "__v": 0,
                                "version": 33
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":{\"path\":\"/path/to/database.zip\"},\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":false,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"streamable\":false}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"--result_filter_\"},\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"--sequence_filter_\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--out_offset\",\"order\":122},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--in_offset\",\"order\":121},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--one_based\",\"order\":120},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--zero_based\",\"order\":119},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--up_down_stream_len\",\"order\":118},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":117,\"separator\":\"=\",\"prefix\":\"--splice_site_size\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--sequence_ontolgy\",\"order\":116},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--only_reg\",\"order\":115},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--oicr\",\"order\":114},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--reg\",\"order\":113},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--lof\",\"order\":112},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--hgvs\",\"order\":111},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--gene_id\",\"order\":110},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--canon\",\"order\":109},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--cancer\",\"order\":108},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_coverage\",\"order\":107},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_coverage\",\"order\":106},\"type\":\"integer\"},\"max_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_qual\",\"order\":105},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_qual\",\"order\":104},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":103,\"prefix\":\"--csv_stats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"separator\":\"=\",\"order\":102,\"prefix\":\"--chr_name\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"separator\":\"=\",\"order\":101,\"prefix\":\"--output_format\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"separator\":\"=\",\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--database\",\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--variants\",\"order\":171}}},\"required\":[\"input\",\"database_name\",\"output_format\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"7441fc6c06fc\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c12138769d661722c3cffe",
                                "__v": 0,
                                "version": 32
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":{\"path\":\"/path/to/database.zip\"},\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":false,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"sbgoliver/snpeff:v3.6\",\"imageId\":\"7441fc6c06fc\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\",\"output_format\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"--variants\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170,\"prefix\":\"--database\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100,\"separator\":\"=\"}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"--output_format\",\"order\":101,\"separator\":\"=\"}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--chr_name\",\"order\":102,\"separator\":\"=\"}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"--csv_stats\",\"order\":103}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":104,\"prefix\":\"--min_qual\",\"separator\":\"=\"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"--max_qual\",\"separator\":\"=\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"--min_coverage\",\"separator\":\"=\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":107,\"prefix\":\"--max_coverage\",\"separator\":\"=\"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":108,\"prefix\":\"--cancer\",\"separator\":\"\"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"--canon\",\"separator\":\"\"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"--gene_id\",\"separator\":\"\"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"--hgvs\",\"separator\":\"\"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"--lof\",\"separator\":\"\"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":113,\"prefix\":\"--reg\",\"separator\":\"=\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":114,\"prefix\":\"--oicr\",\"separator\":\"\"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"--only_reg\",\"separator\":\"\"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"--sequence_ontolgy\",\"separator\":\"\"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--splice_site_size\",\"separator\":\"=\",\"order\":117}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":118,\"prefix\":\"--up_down_stream_len\",\"separator\":\"=\"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":119,\"prefix\":\"--zero_based\",\"separator\":\"\"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"--one_based\",\"separator\":\"\"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":121,\"prefix\":\"--in_offset\",\"separator\":\"=\"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"--out_offset\",\"separator\":\"=\"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--sequence_filter_\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"adapter\":{\"prefix\":\"--result_filter_\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"streamable\":false,\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c102db769d661722c3cfe3",
                                "__v": 0,
                                "version": 31
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":{\"path\":\"/path/to/database.zip\"},\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":false,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"streamable\":false}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"--result_filter_\"},\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"--sequence_filter_\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--out_offset\",\"order\":122},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--in_offset\",\"order\":121},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--one_based\",\"order\":120},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--zero_based\",\"order\":119},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--up_down_stream_len\",\"order\":118},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":117,\"separator\":\"=\",\"prefix\":\"--splice_site_size\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--sequence_ontolgy\",\"order\":116},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--only_reg\",\"order\":115},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--oicr\",\"order\":114},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--reg\",\"order\":113},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--lof\",\"order\":112},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--hgvs\",\"order\":111},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--gene_id\",\"order\":110},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--canon\",\"order\":109},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--cancer\",\"order\":108},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_coverage\",\"order\":107},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_coverage\",\"order\":106},\"type\":\"integer\"},\"max_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_qual\",\"order\":105},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_qual\",\"order\":104},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":103,\"prefix\":\"--csv_stats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"separator\":\"=\",\"order\":102,\"prefix\":\"--chr_name\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"separator\":\"=\",\"order\":101,\"prefix\":\"--output_format\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"separator\":\"=\",\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--database\",\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--variants\",\"order\":171}}},\"required\":[\"input\",\"database_name\",\"output_format\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"83dbadf1fdab\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c0fe21769d661722c3cfde",
                                "__v": 0,
                                "version": 30
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":{\"path\":\"/path/to/database.zip\"},\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":true,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"83dbadf1fdab\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\",\"output_format\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"--variants\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170,\"prefix\":\"--database\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100,\"separator\":\"=\"}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"--output_format\",\"order\":101,\"separator\":\"=\"}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--chr_name\",\"order\":102,\"separator\":\"=\"}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"--csv_stats\",\"order\":103}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":104,\"prefix\":\"--min_qual\",\"separator\":\"=\"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"--max_qual\",\"separator\":\"=\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"--min_coverage\",\"separator\":\"=\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":107,\"prefix\":\"--max_coverage\",\"separator\":\"=\"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":108,\"prefix\":\"--cancer\",\"separator\":\"\"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"--canon\",\"separator\":\"\"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"--gene_id\",\"separator\":\"\"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"--hgvs\",\"separator\":\"\"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"--lof\",\"separator\":\"\"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":113,\"prefix\":\"--reg\",\"separator\":\"=\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":114,\"prefix\":\"--oicr\",\"separator\":\"\"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"--only_reg\",\"separator\":\"\"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"--sequence_ontolgy\",\"separator\":\"\"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--splice_site_size\",\"separator\":\"=\",\"order\":117}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":118,\"prefix\":\"--up_down_stream_len\",\"separator\":\"=\"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":119,\"prefix\":\"--zero_based\",\"separator\":\"\"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"--one_based\",\"separator\":\"\"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":121,\"prefix\":\"--in_offset\",\"separator\":\"=\"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"--out_offset\",\"separator\":\"=\"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--sequence_filter_\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"adapter\":{\"prefix\":\"--result_filter_\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c0f8d9769d661722c3cfd6",
                                "__v": 0,
                                "version": 29
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":\"/path/to/database.zip\",\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":true,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"--result_filter_\"},\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"--sequence_filter_\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--out_offset\",\"order\":122},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--in_offset\",\"order\":121},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--one_based\",\"order\":120},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--zero_based\",\"order\":119},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--up_down_stream_len\",\"order\":118},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":117,\"separator\":\"=\",\"prefix\":\"--splice_site_size\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--sequence_ontolgy\",\"order\":116},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--only_reg\",\"order\":115},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--oicr\",\"order\":114},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--reg\",\"order\":113},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--lof\",\"order\":112},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--hgvs\",\"order\":111},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--gene_id\",\"order\":110},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--canon\",\"order\":109},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--cancer\",\"order\":108},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_coverage\",\"order\":107},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_coverage\",\"order\":106},\"type\":\"integer\"},\"max_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_qual\",\"order\":105},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_qual\",\"order\":104},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":103,\"prefix\":\"--csv_stats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"separator\":\"=\",\"order\":102,\"prefix\":\"--chr_name\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"separator\":\"=\",\"order\":101,\"prefix\":\"--output_format\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"separator\":\"=\",\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"separator\":\"=\",\"prefix\":\"--database\",\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--variants\",\"order\":171}}},\"required\":[\"input\",\"database_name\",\"output_format\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"55789913271d\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c0f31d769d661722c3cfd2",
                                "__v": 0,
                                "version": 28
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":\"/path/to/database.zip\",\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":true,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"21ea2d5b338b\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\",\"output_format\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"--variants\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170,\"prefix\":\"--database\",\"separator\":\"=\"},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100,\"separator\":\"=\"}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"--output_format\",\"order\":101,\"separator\":\"=\"}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--chr_name\",\"order\":102,\"separator\":\"=\"}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"--csv_stats\",\"order\":103}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":104,\"prefix\":\"--min_qual\",\"separator\":\"=\"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"--max_qual\",\"separator\":\"=\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"--min_coverage\",\"separator\":\"=\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":107,\"prefix\":\"--max_coverage\",\"separator\":\"=\"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":108,\"prefix\":\"--cancer\",\"separator\":\"\"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"--canon\",\"separator\":\"\"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"--gene_id\",\"separator\":\"\"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"--hgvs\",\"separator\":\"\"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"--lof\",\"separator\":\"\"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":113,\"prefix\":\"--reg\",\"separator\":\"=\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":114,\"prefix\":\"--oicr\",\"separator\":\"\"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"--only_reg\",\"separator\":\"\"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"--sequence_ontolgy\",\"separator\":\"\"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--splice_site_size\",\"separator\":\"=\",\"order\":117}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":118,\"prefix\":\"--up_down_stream_len\",\"separator\":\"=\"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":119,\"prefix\":\"--zero_based\",\"separator\":\"\"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"--one_based\",\"separator\":\"\"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":121,\"prefix\":\"--in_offset\",\"separator\":\"=\"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"--out_offset\",\"separator\":\"=\"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--sequence_filter_\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"adapter\":{\"prefix\":\"--result_filter_\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c0efd2769d661722c3cfd1",
                                "__v": 0,
                                "version": 27
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":\"/path/to/database.zip\",\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":true,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"--result_filter_\"},\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"--sequence_filter_\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--out_offset\",\"order\":122},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--in_offset\",\"order\":121},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--one_based\",\"order\":120},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--zero_based\",\"order\":119},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--up_down_stream_len\",\"order\":118},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":117,\"separator\":\"=\",\"prefix\":\"--splice_site_size\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--sequence_ontolgy\",\"order\":116},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--only_reg\",\"order\":115},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--oicr\",\"order\":114},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--reg\",\"order\":113},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--lof\",\"order\":112},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--hgvs\",\"order\":111},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--gene_id\",\"order\":110},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--canon\",\"order\":109},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--cancer\",\"order\":108},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_coverage\",\"order\":107},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_coverage\",\"order\":106},\"type\":\"integer\"},\"max_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_qual\",\"order\":105},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_qual\",\"order\":104},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":103,\"prefix\":\"--csv_stats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"separator\":\"=\",\"order\":102,\"prefix\":\"--chr_name\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"separator\":\"=\",\"order\":101,\"prefix\":\"--output_format\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"separator\":\"=\",\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"separator\":\"=\",\"prefix\":\"--database\",\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--variants\",\"order\":171}}},\"required\":[\"input\",\"database_name\",\"output_format\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"1d8c794721cb\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c0e9d4769d661722c3cfd0",
                                "__v": 0,
                                "version": 26
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":\"/path/to/database.zip\",\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":true,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"f08e38ab1c83\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\",\"output_format\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"--variants\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170,\"prefix\":\"--database\",\"separator\":\"=\"},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100,\"separator\":\"=\"}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"--output_format\",\"order\":101,\"separator\":\"=\"}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--chr_name\",\"order\":102,\"separator\":\"=\"}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"--csv_stats\",\"order\":103}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":104,\"prefix\":\"--min_qual\",\"separator\":\"=\"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"--max_qual\",\"separator\":\"=\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"--min_coverage\",\"separator\":\"=\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":107,\"prefix\":\"--max_coverage\",\"separator\":\"=\"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":108,\"prefix\":\"--cancer\",\"separator\":\"\"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"--canon\",\"separator\":\"\"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"--gene_id\",\"separator\":\"\"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"--hgvs\",\"separator\":\"\"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"--lof\",\"separator\":\"\"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":113,\"prefix\":\"--reg\",\"separator\":\"=\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":114,\"prefix\":\"--oicr\",\"separator\":\"\"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"--only_reg\",\"separator\":\"\"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"--sequence_ontolgy\",\"separator\":\"\"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--splice_site_size\",\"separator\":\"=\",\"order\":117}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":118,\"prefix\":\"--up_down_stream_len\",\"separator\":\"=\"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":119,\"prefix\":\"--zero_based\",\"separator\":\"\"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"--one_based\",\"separator\":\"\"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":121,\"prefix\":\"--in_offset\",\"separator\":\"=\"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"--out_offset\",\"separator\":\"=\"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--sequence_filter_\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"adapter\":{\"prefix\":\"--result_filter_\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54c0da42769d661722c3cfc8",
                                "__v": 0,
                                "version": 25
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":\"/path/to/database.zip\",\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":true,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"--result_filter_\"},\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"--sequence_filter_\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--out_offset\",\"order\":122},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--in_offset\",\"order\":121},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--one_based\",\"order\":120},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--zero_based\",\"order\":119},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--up_down_stream_len\",\"order\":118},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":117,\"separator\":\"=\",\"prefix\":\"--splice_site_size\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--sequence_ontolgy\",\"order\":116},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--only_reg\",\"order\":115},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--oicr\",\"order\":114},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--reg\",\"order\":113},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--lof\",\"order\":112},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--hgvs\",\"order\":111},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--gene_id\",\"order\":110},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--canon\",\"order\":109},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\"\",\"prefix\":\"--cancer\",\"order\":108},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_coverage\",\"order\":107},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_coverage\",\"order\":106},\"type\":\"integer\"},\"max_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--max_qual\",\"order\":105},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\"=\",\"prefix\":\"--min_qual\",\"order\":104},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":103,\"prefix\":\"--csv_stats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"separator\":\"=\",\"order\":102,\"prefix\":\"--chr_name\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"separator\":\"=\",\"order\":101,\"prefix\":\"--output_format\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"separator\":\"=\",\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"separator\":\"=\",\"prefix\":\"--database\",\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\"=\",\"prefix\":\"--variants\",\"order\":171}}},\"required\":[\"input\",\"database_name\",\"output_format\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"70751ca9c0c2\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bfd26a769d661722c3cf8d",
                                "__v": 0,
                                "version": 24
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[{\"Value\":\"del\"},{\"Value\":\"ins\"}],\"result_filter\":[{\"Value\":\"no_downstream\"},{\"Value\":\"no_intron\"}],\"around\":5,\"spliceSiteSize\":2,\"database\":\"/path/to/database.zip\",\"variants\":{\"path\":\"/path/to/variants.vcf\"},\"csv_stats\":true,\"chr_name\":\"chr\",\"min_qual\":5,\"max_qual\":8,\"min_coverage\":5,\"max_coverage\":8,\"cancer\":true,\"canon\":true,\"geneId\":true,\"hgvs\":true,\"lof\":true,\"reg\":\"gg\",\"oicr\":true,\"onlyReg\":true,\"sequenceOntolgy\":true,\"upDownStreamLen\":2,\"zero_based\":true,\"one_based\":true,\"inOffset\":5,\"outOffset\":2},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"0945407c274c\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\",\"output_format\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"--variants\",\"separator\":\"=\",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170,\"prefix\":\"--database\",\"separator\":\"=\"},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100,\"separator\":\"=\"}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"--output_format\",\"order\":101,\"separator\":\"=\"}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--chr_name\",\"order\":102,\"separator\":\"=\"}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"--csv_stats\",\"order\":103}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":104,\"prefix\":\"--min_qual\",\"separator\":\"=\"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"--max_qual\",\"separator\":\"=\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"--min_coverage\",\"separator\":\"=\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":107,\"prefix\":\"--max_coverage\",\"separator\":\"=\"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":108,\"prefix\":\"--cancer\",\"separator\":\"\"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"--canon\",\"separator\":\"\"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"--gene_id\",\"separator\":\"\"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"--hgvs\",\"separator\":\"\"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"--lof\",\"separator\":\"\"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":113,\"prefix\":\"--reg\",\"separator\":\"=\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":114,\"prefix\":\"--oicr\",\"separator\":\"\"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"--only_reg\",\"separator\":\"\"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"--sequence_ontolgy\",\"separator\":\"\"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--splice_site_size\",\"separator\":\"=\",\"order\":117}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":118,\"prefix\":\"--up_down_stream_len\",\"separator\":\"=\"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":119,\"prefix\":\"--zero_based\",\"separator\":\"\"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"--one_based\",\"separator\":\"\"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":121,\"prefix\":\"--in_offset\",\"separator\":\"=\"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"--out_offset\",\"separator\":\"=\"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"--sequence_filter_\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no_downstream\",\"no_intergenic\",\"no_intron\",\"no_upstream\",\"no_utr\"],\"adapter\":{\"prefix\":\"--result_filter_\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"python /opt/snpEff_v3_6/run_snpeff.py\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bfcd69769d661722c3cf86",
                                "__v": 0,
                                "version": 23
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"},\"csv_stats\":true},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"prefix\":\"-stats\",\"order\":1},{\"separator\":\"\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\",\"order\":2}],\"stdout\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"baseCmd\":[\"java -Xmx4g -jar /opt/snpEff_v3_6/snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"-around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\" \",\"prefix\":\"\",\"order\":171}}},\"required\":[\"input\",\"database_name\",\"variants\",\"database\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"8e76fdb444d0\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bcff7686b3c977657736ec",
                                "__v": 0,
                                "version": 22
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"},\"csv_stats\":true},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"8e76fdb444d0\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\",\"variants\",\"database\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"\",\"separator\":\" \",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"java -Xmx4g -jar /opt/snpEff_v3_6/snpEff.jar eff\"],\"stdout\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"args\":[{\"order\":1,\"prefix\":\"-stats\",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bcfeab86b3c977657736eb",
                                "__v": 0,
                                "version": 21
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"},\"csv_stats\":true},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"prefix\":\"-stats\",\"order\":1},{\"separator\":\"\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\",\"order\":2}],\"stdout\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"baseCmd\":[\"java -Xmx4g -jar /opt/snpEff_v3_6/snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"-around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\" \",\"prefix\":\"\",\"order\":171}}},\"required\":[\"input\",\"database_name\",\"variants\",\"database\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e8d6cea24c50\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bcfd0086b3c977657736e8",
                                "__v": 0,
                                "version": 20
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"},\"csv_stats\":true},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"b1a8bbc974d5\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\",\"variants\",\"database\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"\",\"separator\":\" \",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"java -Xmx4g -jar /opt/snpEff_v3_6/snpEff.jar eff\"],\"stdout\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"args\":[{\"order\":1,\"prefix\":\"-stats\",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bcf8c786b3c977657736e5",
                                "__v": 0,
                                "version": 19
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"},\"csv_stats\":true},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"prefix\":\"-stats\",\"order\":1},{\"separator\":\"\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\",\"order\":2}],\"stdout\":\"\",\"baseCmd\":[\"java -Xmx4g -jar /opt/snpEff_v3_6/snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":\"text\"},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"/opt/snpEff_v3_6/\\\" + namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"/opt/snpEff_v3_6/\\\" + namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return \\\"/opt/snpEff_v3_6/\\\" + namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\" \",\"prefix\":\"\",\"order\":171}}},\"required\":[\"input\",\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"b1a8bbc974d5\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bcf14c86b3c977657736e1",
                                "__v": 0,
                                "version": 18
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"b1a8bbc974d5\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"\",\"separator\":\" \",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return \\\"txt\\\"\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return \\\"bed\\\"\\n  }else{\\n    return \\\"vcf\\\"\\n  }\\n}\"}}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"},\"metadata\":{\"file_type\":\"text\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"java -Xmx4g -jar /opt/snpEff_v3_6/snpEff.jar eff\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"prefix\":\"-stats\",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bceb3f86b3c977657736e0",
                                "__v": 0,
                                "version": 17
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"prefix\":\"-stats\",\"order\":1},{\"separator\":\"\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\",\"order\":2}],\"stdout\":\"\",\"baseCmd\":[\"java -Xmx4g -jar /opt/snpEff_v3_6/snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\" \",\"prefix\":\"\",\"order\":171}}},\"required\":[\"input\",\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"b1a8bbc974d5\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bce99186b3c977657736df",
                                "__v": 0,
                                "version": 16
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false,\"mem\":4000}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"c1131c2f3ddd\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"\",\"separator\":\" \",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"java -Xmx4g -jar /opt/snpEff_v3_6/snpEff.jar eff\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"prefix\":\"-stats\",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bce71c86b3c977657736dd",
                                "__v": 0,
                                "version": 15
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"prefix\":\"-stats\",\"order\":1},{\"separator\":\"\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\",\"order\":2}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /opt/snpEff_v3_6/snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants.path\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":170}},\"variants\":{\"type\":\"file\",\"adapter\":{\"streamable\":false,\"separator\":\" \",\"prefix\":\"\",\"order\":171}}},\"required\":[\"input\",\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c1131c2f3ddd\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bce19286b3c977657736db",
                                "__v": 0,
                                "version": 14
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":{\"path\":\"test-data/example_human_Illumina.vcf\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"c1131c2f3ddd\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171,\"prefix\":\"\",\"separator\":\" \",\"streamable\":false},\"type\":\"file\"},\"database\":{\"adapter\":{\"order\":170},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"java -jar /opt/snpEff_v3_6/snpEff.jar eff\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"prefix\":\"-stats\",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bce10086b3c977657736da",
                                "__v": 0,
                                "version": 13
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":\"test-data/example_human_ Illumina.sorted.realigned.deduped.recalibrated.vcf\"},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"prefix\":\"-stats\",\"order\":1},{\"separator\":\"\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\",\"order\":2}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /opt/snpEff_v3_6/snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":170}},\"variants\":{\"type\":\"string\",\"adapter\":{\"order\":171}}},\"required\":[\"input\",\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c1131c2f3ddd\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bcd0ff86b3c977657736d7",
                                "__v": 0,
                                "version": 12
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "job": "{\"inputs\":{\"output_format\":\"vcf\",\"sequence_filter\":[],\"result_filter\":[],\"around\":0,\"spliceSiteSize\":2,\"database\":\"GRCh37.75\",\"variants\":\"test-data/example_human_ Illumina.sorted.realigned.deduped.recalibrated.vcf\"},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"c1131c2f3ddd\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171},\"type\":\"string\"},\"database\":{\"adapter\":{\"order\":170},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"properties\":{\"annotated\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}},\"type\":\"file\"},\"summary_text\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}},\"type\":\"file\"},\"summary\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}},\"type\":\"file\"}},\"type\":\"object\",\"required\":[]},\"adapter\":{\"baseCmd\":[\"java -jar /opt/snpEff_v3_6/snpEff.jar eff\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"prefix\":\"--stats\",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54bcd08086b3c977657736d6",
                                "__v": 0,
                                "version": 11
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\\n\"},\"prefix\":\"--stats\",\"order\":1},{\"separator\":\"\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\",\"order\":2}],\"stdout\":\"\",\"baseCmd\":[\"java -jar snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{\"summary\":{\"type\":\"file\",\"adapter\":{\"metadata\":{},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.csv_stats){\\n    return namebase.concat(\\\".snpEff_summary.csv\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_summary.html\\\")\\n  }\\n}\"}}},\"summary_text\":{\"type\":\"file\",\"adapter\":{\"metadata\":{},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  return namebase.concat(\\\".snpEff_summary.genes.txt\\\")\\n}\"}}},\"annotated\":{\"type\":\"file\",\"adapter\":{\"metadata\":{},\"glob\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  \\n  if($job.inputs.output_format == \\\"txt\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.txt\\\")\\n  }else if ($job.inputs.output_format == \\\"bed\\\" || $job.inputs.output_format == \\\"bedAnn\\\"){\\n    return namebase.concat(\\\".snpEff_annotated.bed\\\")\\n  }else{\\n    return namebase.concat(\\\".snpEff_annotated.vcf\\\")\\n  }\\n}\"}}}}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":170}},\"variants\":{\"type\":\"string\",\"adapter\":{\"order\":171}}},\"required\":[\"input\",\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c1131c2f3ddd\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b9049f9d7038e10b791661",
                                "__v": 0,
                                "version": 10
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"c1131c2f3ddd\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171},\"type\":\"string\"},\"database\":{\"adapter\":{\"order\":170},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"type\":\"object\",\"required\":[],\"properties\":{}},\"adapter\":{\"baseCmd\":[\"java -jar snpEff.jar eff\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"prefix\":\"--stats\",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  return namebase.concat(\\\".snpEff_summary.html\\\")\\n}\\n\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b8f0c59d7038e10b791655",
                                "__v": 0,
                                "version": 9
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  return namebase.concat(\\\".snpEff_summary.html\\\")\\n}\\n\"},\"prefix\":\"--stats\",\"order\":1},{\"separator\":\" \",\"value\":{\"$expr\":\"\\\"snpEff.config\\\"\"},\"prefix\":\"-config\",\"order\":2},{\"separator\":\"\",\"order\":3,\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":170}},\"variants\":{\"type\":\"string\",\"adapter\":{\"order\":171}}},\"required\":[\"input\",\"database_name\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c1131c2f3ddd\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b8e4e19d7038e10b791650",
                                "__v": 0,
                                "version": 8
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"65af9421dc93\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":171},\"type\":\"string\"},\"database\":{\"adapter\":{\"order\":170},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"type\":\"object\",\"required\":[],\"properties\":{}},\"adapter\":{\"baseCmd\":[\"java -jar snpEff.jar eff\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"prefix\":\"--stats\",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  return namebase.concat(\\\".snpEff_summary.html\\\")\\n}\\n\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-config\",\"value\":{\"$expr\":\"\\\"snpEff.config\\\"\"},\"separator\":\" \"},{\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"order\":3,\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b8e3a69d7038e10b79164f",
                                "__v": 0,
                                "version": 7
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  return namebase.concat(\\\".snpEff_summary.html\\\")\\n}\\n\"},\"prefix\":\"--stats\",\"order\":1},{\"separator\":\" \",\"value\":{\"$expr\":\"\\\"snpEff.config\\\"\"},\"prefix\":\"-config\",\"order\":2},{\"separator\":\"\",\"order\":3,\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":200}},\"variants\":{\"type\":\"string\",\"adapter\":{\"order\":201}}},\"required\":[\"input\",\"database_name\",\"variants\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"65af9421dc93\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b8e1119d7038e10b79164e",
                                "__v": 0,
                                "version": 6
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"65af9421dc93\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\",\"database_name\",\"variants\"],\"properties\":{\"variants\":{\"adapter\":{\"order\":201},\"type\":\"string\"},\"database\":{\"adapter\":{\"order\":200},\"type\":\"string\"},\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":150,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":151,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"type\":\"object\",\"required\":[],\"properties\":{}},\"adapter\":{\"baseCmd\":[\"java -jar snpEff.jar eff\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"prefix\":\"--stats\",\"value\":{\"$expr\":\"{\\t\\n  filepath = $job.inputs.variants\\n  //filename=filepath.substring(filepath.lastIndexOf('/')+1);  \\n  namebase = filepath.substring(filepath.lastIndexOf('/')+1, filepath.lastIndexOf('.'));\\n \\n  return namebase.concat(\\\".snpEff_summary.html\\\")\\n}\\n\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-config\",\"value\":{\"$expr\":\"\\\"snpEff.config\\\"\"},\"separator\":\" \"},{\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"order\":3,\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b8e10c9d7038e10b79164d",
                                "__v": 0,
                                "version": 5
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"\\\"namebase\\\" + '.snpEff_summary.html'\"},\"prefix\":\"--stats\",\"order\":1},{\"separator\":\" \",\"value\":{\"$expr\":\"\\\"snpEff.config\\\"\"},\"prefix\":\"-config\",\"order\":2},{\"separator\":\"\",\"order\":3,\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar snpEff.jar eff\"]},\"outputs\":{\"required\":[],\"type\":\"object\",\"properties\":{}},\"inputs\":{\"properties\":{\"result_filter\":{\"items\":{\"required\":[],\"properties\":{\"Value\":{\"adapter\":{\"separator\":\"\",\"order\":1,\"prefix\":\"-\"},\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"type\":\"string\"}},\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":151},\"type\":\"array\"},\"sequence_filter\":{\"items\":{\"properties\":{\"Value\":{\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"],\"adapter\":{\"order\":1,\"separator\":\"\",\"prefix\":\"-\"},\"type\":\"string\"}},\"required\":[],\"type\":\"object\"},\"adapter\":{\"itemSeparator\":\" \",\"separator\":\" \",\"prefix\":\"\",\"order\":150},\"type\":\"array\"},\"outOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-outOffset\",\"order\":123},\"type\":\"integer\"},\"inOffset\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-inOffset\",\"order\":122},\"type\":\"integer\"},\"one_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-1\",\"order\":121},\"type\":\"boolean\"},\"zero_based\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-0\",\"order\":120},\"type\":\"boolean\"},\"upDownStreamLen\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-upDownStreamLen\",\"order\":119},\"type\":\"integer\"},\"spliceSiteSize\":{\"adapter\":{\"order\":118,\"separator\":\" \",\"prefix\":\"-spliceSiteSize\"},\"type\":\"integer\"},\"sequenceOntolgy\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-sequenceOntolgy\",\"order\":117},\"type\":\"boolean\"},\"onlyReg\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-onlyReg\",\"order\":116},\"type\":\"boolean\"},\"oicr\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"oicr\",\"order\":115},\"type\":\"boolean\"},\"reg\":{\"adapter\":{\"prefix\":\"-reg\",\"order\":114},\"type\":\"string\"},\"lof\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-lof\",\"order\":113},\"type\":\"boolean\"},\"hgvs\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-hgvs\",\"order\":112},\"type\":\"boolean\"},\"geneId\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-geneId\",\"order\":111},\"type\":\"boolean\"},\"canon\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-canon\",\"order\":110},\"type\":\"boolean\"},\"cancer\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-cancer\",\"order\":109},\"type\":\"boolean\"},\"max_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxC\",\"order\":108},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"prefix\":\"-minC\",\"order\":107},\"type\":\"string\"},\"max_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-maxQ\",\"order\":106},\"type\":\"integer\"},\"min_qual\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"-minQ\",\"order\":105},\"type\":\"integer\"},\"csv_stats\":{\"adapter\":{\"order\":104,\"prefix\":\"-csvStats\"},\"type\":\"boolean\"},\"chr_name\":{\"adapter\":{\"order\":102,\"prefix\":\"-chr\"},\"type\":\"string\"},\"output_format\":{\"adapter\":{\"order\":101,\"prefix\":\"-o\"},\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"type\":\"string\"},\"around\":{\"adapter\":{\"order\":100,\"prefix\":\"--around\"},\"type\":\"integer\"},\"database\":{\"type\":\"string\",\"adapter\":{\"order\":200}},\"variants\":{\"type\":\"string\",\"adapter\":{\"order\":201}}},\"required\":[\"input\",\"database_name\",\"variants\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"65af9421dc93\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b7e6cf9d7038e10b791634",
                                "__v": 0,
                                "version": 4
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"65af9421dc93\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"input\"],\"properties\":{\"around\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--around\",\"order\":100}},\"output_format\":{\"type\":\"string\",\"enum\":[\"vcf\",\"txt\",\"gatk\",\"bed\",\"bedAnn\"],\"adapter\":{\"prefix\":\"-o\",\"order\":101}},\"chr_name\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-chr\",\"order\":102}},\"csv_stats\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-csvStats\",\"order\":104}},\"min_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":105,\"prefix\":\"-minQ\",\"separator\":\" \"}},\"max_qual\":{\"type\":\"integer\",\"adapter\":{\"order\":106,\"prefix\":\"-maxQ\",\"separator\":\" \"}},\"min_coverage\":{\"type\":\"string\",\"adapter\":{\"order\":107,\"prefix\":\"-minC\"}},\"max_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":108,\"prefix\":\"-maxC\",\"separator\":\" \"}},\"cancer\":{\"type\":\"boolean\",\"adapter\":{\"order\":109,\"prefix\":\"-cancer\",\"separator\":\" \"}},\"canon\":{\"type\":\"boolean\",\"adapter\":{\"order\":110,\"prefix\":\"-canon\",\"separator\":\" \"}},\"geneId\":{\"type\":\"boolean\",\"adapter\":{\"order\":111,\"prefix\":\"-geneId\",\"separator\":\" \"}},\"hgvs\":{\"type\":\"boolean\",\"adapter\":{\"order\":112,\"prefix\":\"-hgvs\",\"separator\":\" \"}},\"lof\":{\"type\":\"boolean\",\"adapter\":{\"order\":113,\"prefix\":\"-lof\",\"separator\":\" \"}},\"reg\":{\"type\":\"string\",\"adapter\":{\"order\":114,\"prefix\":\"-reg\"}},\"oicr\":{\"type\":\"boolean\",\"adapter\":{\"order\":115,\"prefix\":\"oicr\",\"separator\":\" \"}},\"onlyReg\":{\"type\":\"boolean\",\"adapter\":{\"order\":116,\"prefix\":\"-onlyReg\",\"separator\":\" \"}},\"sequenceOntolgy\":{\"type\":\"boolean\",\"adapter\":{\"order\":117,\"prefix\":\"-sequenceOntolgy\",\"separator\":\" \"}},\"spliceSiteSize\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"-spliceSiteSize\",\"separator\":\" \",\"order\":118}},\"upDownStreamLen\":{\"type\":\"integer\",\"adapter\":{\"order\":119,\"prefix\":\"-upDownStreamLen\",\"separator\":\" \"}},\"zero_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":120,\"prefix\":\"-0\",\"separator\":\" \"}},\"one_based\":{\"type\":\"boolean\",\"adapter\":{\"order\":121,\"prefix\":\"-1\",\"separator\":\" \"}},\"inOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":122,\"prefix\":\"-inOffset\",\"separator\":\" \"}},\"outOffset\":{\"type\":\"integer\",\"adapter\":{\"order\":123,\"prefix\":\"-outOffset\",\"separator\":\" \"}},\"sequence_filter\":{\"type\":\"array\",\"adapter\":{\"order\":124,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"required\":[],\"properties\":{\"Value\":{\"type\":\"string\",\"adapter\":{\"prefix\":\"-\",\"separator\":\"\",\"order\":1},\"enum\":[\"del\",\"ins\",\"hom\",\"het\",\"mnp\",\"snp\"]}}}},\"result_filter\":{\"type\":\"array\",\"adapter\":{\"order\":125,\"prefix\":\"\",\"separator\":\" \",\"itemSeparator\":\" \"},\"items\":{\"type\":\"object\",\"properties\":{\"Value\":{\"type\":\"string\",\"enum\":[\"no-downstream\",\"no-intergenic\",\"no-intron\",\"no-upstream\",\"no-utr\"],\"adapter\":{\"prefix\":\"-\",\"order\":1,\"separator\":\"\"}}},\"required\":[]}}}},\"outputs\":{\"type\":\"object\",\"required\":[],\"properties\":{}},\"adapter\":{\"baseCmd\":[\"java -jar snpEff.jar eff\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"prefix\":\"--stats\",\"value\":{\"$expr\":\"\\\"namebase\\\" + '.snpEff_summary.html'\"},\"separator\":\" \"},{\"order\":2,\"prefix\":\"-config\",\"value\":{\"$expr\":\"\\\"snpEff.config\\\"\"},\"separator\":\" \"},{\"prefix\":\"-\",\"value\":{\"$expr\":\"\\\"v\\\"\"},\"order\":3,\"separator\":\"\"}]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b7e5689d7038e10b791631",
                                "__v": 0,
                                "version": 3
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"\\\"namebase\\\" + '.snpEff_summary.html'\"},\"prefix\":\"--stats\",\"order\":1},{\"separator\":\" \",\"value\":{\"$expr\":\"\\\"snpEff.config\\\"\"},\"prefix\":\"-config\",\"order\":2},{\"separator\":\"\",\"order\":3,\"value\":{\"$expr\":\"\\\"v\\\"\"},\"prefix\":\"-\"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar snpEff.jar eff\"]},\"outputs\":{\"properties\":{\"output\":{\"adapter\":{\"secondaryFiles\":[\".bai\"],\"glob\":{\"$expr\":\"$job.inputs.input.path\"},\"metadata\":{\"__inherit__\":\"input\"}},\"type\":\"file\"}},\"required\":[],\"type\":\"object\"},\"inputs\":{\"required\":[\"input\"],\"properties\":{},\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":4000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"65af9421dc93\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"type\":\"docker\"}}},\"documentAuthor\":\"sbg-oliver\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b7d9259d7038e10b791614",
                                "__v": 0,
                                "version": 2
                            },
                            {
                                "app_id": "54b7d7499d7038e10b79160f",
                                "json": "{\"name\":\"snpeff\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"sbg-oliver\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"images.sbgenomics.com/oliver/snpeff\",\"imageId\":\"65af9421dc93\"}},\"resources\":{\"cpu\":0,\"mem\":4000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"properties\":{\"input\":{\"type\":\"file\",\"adapter\":{\"order\":1}},\"nthreads\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--nthreads\",\"order\":2,\"separator\":\"=\"}}},\"required\":[\"input\"]},\"outputs\":{\"type\":\"object\",\"required\":[],\"properties\":{\"output\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"__inherit__\":\"input\"},\"glob\":{\"$expr\":\"$job.inputs.input.path\"},\"secondaryFiles\":[\".bai\"]}}}},\"adapter\":{\"baseCmd\":[\"\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "sbg-oliver",
                                "description": "",
                                "name": "snpeff",
                                "_id": "54b7d7499d7038e10b791610",
                                "__v": 0,
                                "version": 1
                            }
                        ]
                    }
                ],
                "mladenj/bedtools": [
                    {
                        "_id": "54bfcee6769d661722c3cf87",
                        "name": "bedtools genome coverage",
                        "repo": {
                            "__v": 0,
                            "_id": "54bfaa3f769d661722c3cf67",
                            "created_by": "mladenj",
                            "git": false,
                            "name": "bedtools",
                            "owner": "mladenj",
                            "secret": "dc27ef32-9850-4a8d-ae48-34232f1b0991",
                            "user": "54bd1b9286b3c977657736f3",
                            "is_public": true
                        },
                        "user": "54bd1b9286b3c977657736f3",
                        "is_script": false,
                        "revisions": [
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"ref.fasta\"},\"format\":\"BedGraph\",\"report_z\":false,\"split\":false,\"coverage_interval\":\"3 Positions Only\",\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"trackline\":{\"type\":\"boolean\"},\"strand\":{\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"],\"type\":\"string\"},\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":98,\"prefix\":\"-ibam\"}},\"input_genome_reference_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":99,\"streamable\":false}},\"format\":{\"type\":\"string\",\"enum\":[\"BED_Histogram\",\"BED_Depth_Per_Base\",\"BedGraph\"]},\"report_z\":{\"type\":\"boolean\"},\"split\":{\"type\":\"boolean\"},\"coverage_interval\":{\"type\":\"string\",\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"]},\"scale\":{\"type\":\"number\"},\"trackopts\":{\"type\":\"string\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"genomeCoverageBed\"],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"},\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"order\":2},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"order\":3},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED_Depth_Per_Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"order\":4},{\"order\":5,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand != \\\"undefined\\\") {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"order\":6},{\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.trackline != \\\"undefined\\\") {\\n       if ($job.inputs.trackline === true) {\\n         if (typeof $job.inputs.format != \\\"undefined\\\"){\\n           if ( $job.inputs.format === \\\"BedGraph\\\"){\\n              return \\\"-trackline\\\"\\n           }\\n         }  \\n       } \\n    }\\n}\"},\"separator\":\" \"}]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c1203f769d661722c3cffa",
                                "__v": 0,
                                "version": 19
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"ref.fasta\"},\"format\":\"BedGraph\",\"report_z\":false,\"split\":false,\"coverage_interval\":\"3 Positions Only\",\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"order\":1},{\"order\":2,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":3,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":4,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED_Depth_Per_Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"order\":5},{\"order\":6,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.trackline != \\\"undefined\\\") {\\n       if ($job.inputs.trackline === true) {\\n         if (typeof $job.inputs.format != \\\"undefined\\\"){\\n           if ( $job.inputs.format === \\\"BedGraph\\\"){\\n              return \\\"-trackline\\\"\\n           }\\n         }  \\n       } \\n    }\\n}\"}}],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"},\"baseCmd\":[\"genomeCoverageBed\"]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"trackopts\":{\"type\":\"string\"},\"scale\":{\"type\":\"number\"},\"coverage_interval\":{\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"],\"type\":\"string\"},\"split\":{\"type\":\"boolean\"},\"report_z\":{\"type\":\"boolean\"},\"format\":{\"enum\":[\"BED_Histogram\",\"BED_Depth_Per_Base\",\"BedGraph\"],\"type\":\"string\"},\"input_genome_reference_file\":{\"adapter\":{\"streamable\":false,\"order\":99,\"separator\":\" \",\"prefix\":\"-g\"},\"type\":\"file\"},\"input_bam_file\":{\"adapter\":{\"prefix\":\"-ibam\",\"order\":98},\"type\":\"file\"},\"strand\":{\"type\":\"string\",\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"]},\"trackline\":{\"type\":\"boolean\"}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c11682769d661722c3cff3",
                                "__v": 0,
                                "version": 18
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"ref.fasta\"},\"format\":\"BedGraph\",\"report_z\":false,\"split\":false,\"coverage_interval\":\"3 Positions Only\",\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"trackline\":{\"type\":\"boolean\"},\"strand\":{\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"],\"type\":\"string\"},\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":98,\"prefix\":\"-ibam\"}},\"input_genome_reference_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":99,\"streamable\":false}},\"format\":{\"type\":\"string\",\"enum\":[\"BED_Histogram\",\"BED_Depth_Per_Base\",\"BedGraph\"]},\"report_z\":{\"type\":\"boolean\"},\"split\":{\"type\":\"boolean\"},\"coverage_interval\":{\"type\":\"string\",\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"]},\"scale\":{\"type\":\"number\"},\"trackopts\":{\"type\":\"string\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"genomeCoverageBed\"],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"},\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"order\":2},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"order\":3},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED_Depth_Per_Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"order\":4},{\"order\":5,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"order\":6},{\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.trackline != \\\"undefined\\\") {\\n       if ($job.inputs.trackline === true) {\\n         if (typeof $job.inputs.format != \\\"undefined\\\"){\\n           if ( $job.inputs.format === \\\"BedGraph\\\"){\\n              return \\\"-trackline\\\"\\n           }\\n         }  \\n       } \\n    }\\n}\"},\"separator\":\" \"}]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c11189769d661722c3cfef",
                                "__v": 0,
                                "version": 17
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"ref.fasta\"},\"format\":\"BED_Depth_Per_Base\",\"report_z\":true,\"split\":true,\"coverage_interval\":\"3 Positions Only\",\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"order\":1},{\"order\":2,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":3,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":4,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED_Depth_Per_Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"order\":5},{\"order\":6,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.trackline != \\\"undefined\\\") {\\n       if ($job.inputs.trackline === true) {\\n         if (typeof $job.inputs.format != \\\"undefined\\\"){\\n           if ( $job.inputs.format === true){\\n              return \\\"-trackline\\\"\\n           }\\n         }  \\n       } \\n    }\\n}\"}}],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"},\"baseCmd\":[\"genomeCoverageBed\"]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"trackopts\":{\"type\":\"string\"},\"scale\":{\"type\":\"number\"},\"coverage_interval\":{\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"],\"type\":\"string\"},\"split\":{\"type\":\"boolean\"},\"report_z\":{\"type\":\"boolean\"},\"format\":{\"enum\":[\"BED_Histogram\",\"BED_Depth_Per_Base\",\"BedGraph\"],\"type\":\"string\"},\"input_genome_reference_file\":{\"adapter\":{\"streamable\":false,\"order\":99,\"separator\":\" \",\"prefix\":\"-g\"},\"type\":\"file\"},\"input_bam_file\":{\"adapter\":{\"prefix\":\"-ibam\",\"order\":98},\"type\":\"file\"},\"strand\":{\"type\":\"string\",\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"]},\"trackline\":{\"type\":\"boolean\"}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c11107769d661722c3cfee",
                                "__v": 0,
                                "version": 16
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"ref.fasta\"},\"format\":\"BED_Depth_Per_Base\",\"report_z\":true,\"split\":true,\"coverage_interval\":\"3 Positions Only\",\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"trackline\":{\"adapter\":{\"order\":10,\"prefix\":\"-trackline\"},\"type\":\"boolean\"},\"strand\":{\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"],\"type\":\"string\"},\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":98,\"prefix\":\"-ibam\"}},\"input_genome_reference_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":99,\"streamable\":false}},\"format\":{\"type\":\"string\",\"enum\":[\"BED_Histogram\",\"BED_Depth_Per_Base\",\"BedGraph\"]},\"report_z\":{\"type\":\"boolean\"},\"split\":{\"type\":\"boolean\"},\"coverage_interval\":{\"type\":\"string\",\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"]},\"scale\":{\"type\":\"number\"},\"trackopts\":{\"type\":\"string\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"genomeCoverageBed\"],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED_Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"},\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED_Depth_Per_Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"order\":2},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"order\":3},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED_Depth_Per_Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"order\":4},{\"order\":5,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"order\":6}]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c10b5d769d661722c3cfed",
                                "__v": 0,
                                "version": 15
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"ref.fasta\"},\"format\":\"BedGraph\",\"report_z\":false,\"split\":false,\"coverage_interval\":null,\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"order\":1},{\"order\":2,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":3,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":4,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"order\":5},{\"order\":6,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"separator\":\" \"}],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED - Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED - Depth Per Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"},\"baseCmd\":[\"genomeCoverageBed\"]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED - Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED - Depth Per Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"trackopts\":{\"type\":\"string\"},\"scale\":{\"type\":\"number\"},\"coverage_interval\":{\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"],\"type\":\"string\"},\"split\":{\"type\":\"boolean\"},\"report_z\":{\"type\":\"boolean\"},\"format\":{\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"],\"type\":\"string\"},\"input_genome_reference_file\":{\"adapter\":{\"streamable\":false,\"order\":99,\"separator\":\" \",\"prefix\":\"-g\"},\"type\":\"file\"},\"input_bam_file\":{\"adapter\":{\"prefix\":\"-ibam\",\"order\":98},\"type\":\"file\"},\"strand\":{\"type\":\"string\",\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"]},\"trackline\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-trackline\",\"order\":10}}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c106ac769d661722c3cfe8",
                                "__v": 0,
                                "version": 14
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"ref.fasta\"},\"format\":\"BED - Depth Per Base\",\"report_z\":false,\"split\":false,\"coverage_interval\":null,\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"trackline\":{\"adapter\":{\"order\":10,\"prefix\":\"-trackline\"},\"type\":\"boolean\"},\"strand\":{\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"],\"type\":\"string\"},\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":98,\"prefix\":\"-ibam\"}},\"input_genome_reference_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":99,\"streamable\":false}},\"format\":{\"type\":\"string\",\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"]},\"report_z\":{\"type\":\"boolean\"},\"split\":{\"type\":\"boolean\"},\"coverage_interval\":{\"type\":\"string\",\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"]},\"scale\":{\"type\":\"number\"},\"trackopts\":{\"type\":\"string\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"genomeCoverageBed\"],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   if ($job.inputs.format === \\\"BED - Histogram\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BED - Depth Per Base\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".per_interval.bed\\\"\\n   }\\n  \\n   if ($job.inputs.format === \\\"BedGraph\\\") {  \\n      return input_filename + \\\".\\\" + regions_filename + \\\".bedgraph\\\"\\n   }\\n  \\n  \\n  \\n  \\n}\"},\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"order\":2},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"order\":3},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"order\":4},{\"order\":5,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"order\":6}]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c10630769d661722c3cfe7",
                                "__v": 0,
                                "version": 13
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"ref.fasta\"},\"format\":\"BED - Depth Per Base\",\"report_z\":false,\"split\":false,\"coverage_interval\":null,\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"order\":1},{\"order\":2,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":3,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":4,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"order\":5},{\"order\":6,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"separator\":\" \"}],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"},\"baseCmd\":[\"genomeCoverageBed\"]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam_file != \\\"undefined\\\" && $job.inputs.input_bam_file.path){\\n      filepath = $job.inputs.input_bam_file.path\\n   } \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"trackopts\":{\"type\":\"string\"},\"scale\":{\"type\":\"number\"},\"coverage_interval\":{\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"],\"type\":\"string\"},\"split\":{\"type\":\"boolean\"},\"report_z\":{\"type\":\"boolean\"},\"format\":{\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"],\"type\":\"string\"},\"input_genome_reference_file\":{\"adapter\":{\"streamable\":false,\"order\":99,\"separator\":\" \",\"prefix\":\"-g\"},\"type\":\"file\"},\"input_bam_file\":{\"adapter\":{\"prefix\":\"-ibam\",\"order\":98},\"type\":\"file\"},\"strand\":{\"type\":\"string\",\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"]},\"trackline\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-trackline\",\"order\":10}}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c0ff16769d661722c3cfdf",
                                "__v": 0,
                                "version": 12
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"\"},\"input_genome_reference_file\":{\"path\":\"\"},\"format\":\"BED - Depth Per Base\",\"report_z\":false,\"split\":false,\"coverage_interval\":null,\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"trackline\":{\"adapter\":{\"order\":10,\"prefix\":\"-trackline\"},\"type\":\"boolean\"},\"strand\":{\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"],\"type\":\"string\"},\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":98,\"prefix\":\"-ibam\"}},\"input_genome_reference_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":99,\"streamable\":false}},\"format\":{\"type\":\"string\",\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"]},\"report_z\":{\"type\":\"boolean\"},\"split\":{\"type\":\"boolean\"},\"coverage_interval\":{\"type\":\"string\",\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"]},\"scale\":{\"type\":\"number\"},\"trackopts\":{\"type\":\"string\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"genomeCoverageBed\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"order\":2},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"order\":3},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"order\":4},{\"order\":5,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"order\":6}]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c0e308769d661722c3cfcf",
                                "__v": 0,
                                "version": 11
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"regions.fasta\"},\"format\":\"BED - Depth Per Base\",\"report_z\":false,\"split\":false,\"coverage_interval\":null,\"strand\":null,\"scale\":null,\"trackopts\":\"\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"order\":1},{\"order\":2,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":3,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":4,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n          \\n          if ($job.inputs.scale != null) {\\n            return \\\"-scale \\\" + $job.inputs.scale\\n          }  \\n        } \\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"order\":5},{\"order\":6,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"genomeCoverageBed\"]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"trackopts\":{\"type\":\"string\"},\"scale\":{\"type\":\"number\"},\"coverage_interval\":{\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"],\"type\":\"string\"},\"split\":{\"type\":\"boolean\"},\"report_z\":{\"type\":\"boolean\"},\"format\":{\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"],\"type\":\"string\"},\"input_genome_reference_file\":{\"adapter\":{\"streamable\":false,\"order\":99,\"separator\":\" \",\"prefix\":\"-g\"},\"type\":\"file\"},\"input_bam_file\":{\"adapter\":{\"prefix\":\"-ibam\",\"order\":98},\"type\":\"file\"},\"strand\":{\"type\":\"string\",\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"]},\"trackline\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-trackline\",\"order\":10}}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c0e2f0769d661722c3cfce",
                                "__v": 0,
                                "version": 10
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"regions.fasta\"},\"format\":\"BED - Depth Per Base\",\"report_z\":false,\"split\":false,\"coverage_interval\":\"3 Positions Only\",\"strand\":\"Forward (+)\",\"scale\":54.3,\"trackopts\":\"aaas\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"trackline\":{\"adapter\":{\"order\":10,\"prefix\":\"-trackline\"},\"type\":\"boolean\"},\"strand\":{\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"],\"type\":\"string\"},\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":98,\"prefix\":\"-ibam\"}},\"input_genome_reference_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":99,\"streamable\":false}},\"format\":{\"type\":\"string\",\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"]},\"report_z\":{\"type\":\"boolean\"},\"split\":{\"type\":\"boolean\"},\"coverage_interval\":{\"type\":\"string\",\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"]},\"scale\":{\"type\":\"number\"},\"trackopts\":{\"type\":\"string\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   regions_filepath = \\\"empty.bed\\\"\\n   if (typeof $job.inputs.input_genome_reference_file != \\\"undefined\\\" \\n       && $job.inputs.input_genome_reference_file.path){\\n      regions_filepath = $job.inputs.input_genome_reference_file.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"genomeCoverageBed\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"order\":2},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"order\":3},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n         return \\\"-scale \\\" + $job.inputs.scale\\n        } \\n      }      \\n    }\\n}\"},\"order\":4},{\"order\":5,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"order\":6}]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c0daf0769d661722c3cfca",
                                "__v": 0,
                                "version": 9
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"regions.fasta\"},\"format\":\"BED - Depth Per Base\",\"report_z\":false,\"split\":false,\"coverage_interval\":\"3 Positions Only\",\"strand\":\"Forward (+)\",\"scale\":54.3,\"trackopts\":\"aaas\",\"trackline\":true},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"order\":1},{\"order\":2,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":3,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":4,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n         return \\\"-scale \\\" + $job.inputs.scale\\n        } \\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"order\":5},{\"order\":6,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"genomeCoverageBed\"]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"trackopts\":{\"type\":\"string\"},\"scale\":{\"type\":\"number\"},\"coverage_interval\":{\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"],\"type\":\"string\"},\"split\":{\"type\":\"boolean\"},\"report_z\":{\"type\":\"boolean\"},\"format\":{\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"],\"type\":\"string\"},\"input_genome_reference_file\":{\"adapter\":{\"streamable\":false,\"order\":99,\"separator\":\" \",\"prefix\":\"-g\"},\"type\":\"file\"},\"input_bam_file\":{\"adapter\":{\"prefix\":\"-ibam\",\"order\":98},\"type\":\"file\"},\"strand\":{\"type\":\"string\",\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"]},\"trackline\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"-trackline\",\"order\":10}}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c0d5d6769d661722c3cfc4",
                                "__v": 0,
                                "version": 8
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"regions.fasta\"},\"format\":\"BED - Depth Per Base\",\"report_z\":true,\"split\":true,\"coverage_interval\":\"3 Positions Only\",\"strand\":\"Forward (+)\",\"scale\":54.3,\"trackopts\":\"aaas\"},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"strand\":{\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"],\"type\":\"string\"},\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":98,\"prefix\":\"-ibam\"}},\"input_genome_reference_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":99,\"streamable\":false}},\"format\":{\"type\":\"string\",\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"]},\"report_z\":{\"type\":\"boolean\"},\"split\":{\"type\":\"boolean\"},\"coverage_interval\":{\"type\":\"string\",\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"]},\"scale\":{\"type\":\"number\"},\"trackopts\":{\"type\":\"string\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"genomeCoverageBed\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format) {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split) {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"order\":2},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"order\":3},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format != \\\"undefined\\\") {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n        if (typeof $job.inputs.scale != \\\"undefined\\\") {\\n         return \\\"-scale \\\" + $job.inputs.scale\\n        } \\n      }      \\n    }\\n}\"},\"order\":4},{\"order\":5,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.trackopts != \\\"undefined\\\") {\\n      \\n      if ($job.inputs.trackopts.length > 0) {\\n      \\n          return \\\" -trackopts \\\" + $job.inputs.trackopts\\n      }      \\n    }\\n}\"},\"order\":6}]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54c0d2e2769d661722c3cfc0",
                                "__v": 0,
                                "version": 7
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"regions.fasta\"},\"format\":null,\"report_z\":false,\"split\":false,\"coverage_interval\":\"Entire Interval\",\"strand\":\"Not Specified\"},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format) {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"order\":1},{\"order\":2,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split) {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":3,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5 Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"separator\":\" \"},{\"order\":4,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format) {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n         return \\\"-scale\\\"\\n      }      \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strand) {\\n            \\n      if ($job.inputs.strand === \\\"Forward (+)\\\"){\\n         return \\\"-strand +\\\"\\n      } else if ($job.inputs.coverage_interval === \\\"3 Positions Only\\\") {\\n         return \\\"-strand -\\\"  \\n      }       \\n    }\\n}\"},\"order\":5}],\"stdout\":\"\",\"baseCmd\":[\"genomeCoverageBed\"]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"coverage_interval\":{\"enum\":[\"Entire Interval\",\"5 Positions Only\",\"3 Positions Only\"],\"type\":\"string\"},\"split\":{\"type\":\"boolean\"},\"report_z\":{\"type\":\"boolean\"},\"format\":{\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"],\"type\":\"string\"},\"input_genome_reference_file\":{\"adapter\":{\"streamable\":false,\"order\":99,\"separator\":\" \",\"prefix\":\"-g\"},\"type\":\"file\"},\"input_bam_file\":{\"adapter\":{\"prefix\":\"-ibam\",\"order\":98},\"type\":\"file\"},\"strand\":{\"type\":\"string\",\"enum\":[\"Not Specified\",\"Forward (+)\",\"Reverse (-)\"]}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54bfe36e769d661722c3cfb1",
                                "__v": 0,
                                "version": 6
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"regions.fasta\"},\"format\":\"BedGraph\",\"report_z\":false,\"split\":true,\"coverage_interval\":\"5' Positions Only\"},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":98,\"prefix\":\"-ibam\"}},\"input_genome_reference_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":99,\"streamable\":false}},\"format\":{\"type\":\"string\",\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"]},\"report_z\":{\"type\":\"boolean\"},\"split\":{\"type\":\"boolean\"},\"coverage_interval\":{\"type\":\"string\",\"enum\":[\"Entire Interval\",\"5' Positions Only\",\"3' Positions Only\"]}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"genomeCoverageBed\"],\"stdout\":\"\",\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format) {\\n\\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.split) {\\n      \\n      if ($job.inputs.split === true) {\\n         return \\\"-split\\\"\\n      }      \\n    }\\n}\"},\"order\":2},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.coverage_interval) {\\n      \\n      if ($job.inputs.coverage_interval === \\\"5' Positions Only\\\") {\\n         return \\\"-5\\\"\\n      }\\n      \\n      if ($job.inputs.coverage_interval === \\\"3' Positions Only\\\") {\\n         return \\\"-3\\\"\\n      }\\n      \\n    }\\n}\"},\"order\":3},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format) {\\n      \\n      if (($job.inputs.format === \\\"BED - Depth Per Base\\\") || ($job.inputs.format === \\\"BedGraph\\\")){\\n         return \\\"-scale\\\"\\n      }      \\n    }\\n}\"},\"order\":4}]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54bfdf13769d661722c3cfa8",
                                "__v": 0,
                                "version": 5
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"regions.fasta\"},\"format\":\"BedGraph\",\"report_z\":false},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.format) {\\n      \\n      //return  $job.inputs.report_z\\n      \\n      \\n      if ($job.inputs.format === \\\"BED - Depth Per Base\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-d\\\"\\n        } else\\n          return \\\"-dz\\\"          \\n      }\\n      \\n      \\n      if ($job.inputs.format === \\\"BedGraph\\\"){\\n        if ($job.inputs.report_z === true) {\\n          return \\\"-bga\\\"\\n        } else\\n          return \\\"-bg\\\"          \\n      }\\n      \\n      \\n       \\n    }\\n}\"},\"order\":1}],\"stdout\":\"\",\"baseCmd\":[\"genomeCoverageBed\"]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"report_z\":{\"type\":\"boolean\"},\"format\":{\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"],\"type\":\"string\"},\"input_genome_reference_file\":{\"adapter\":{\"streamable\":false,\"order\":99,\"separator\":\" \",\"prefix\":\"-g\"},\"type\":\"file\"},\"input_bam_file\":{\"adapter\":{\"prefix\":\"-ibam\",\"order\":98},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54bfdbdf769d661722c3cf9c",
                                "__v": 0,
                                "version": 4
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":\"file1.bam\"},\"input_genome_reference_file\":{\"path\":\"regions.fasta\"}},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":50,\"prefix\":\"-ibam\"}},\"input_genome_reference_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":51,\"streamable\":false}},\"format\":{\"type\":\"string\",\"enum\":[\"BED - Histogram\",\"BED - Depth Per Base\",\"BedGraph\"]},\"report_z\":{\"type\":\"boolean\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"genomeCoverageBed\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54bfd34f769d661722c3cf91",
                                "__v": 0,
                                "version": 3
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{\"path\":{}},\"input_region_file\":{\"path\":{}}},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"genomeCoverageBed\"]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"input_region_file\":{\"adapter\":{\"streamable\":false,\"order\":51,\"separator\":\" \",\"prefix\":\"-g\"},\"type\":\"file\"},\"input_bam_file\":{\"adapter\":{\"prefix\":\"-ibam\",\"order\":50},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54bfcef4769d661722c3cf89",
                                "__v": 0,
                                "version": 2
                            },
                            {
                                "app_id": "54bfcee6769d661722c3cf87",
                                "job": "{\"inputs\":{\"input_bam_file\":{},\"input_region_file\":{}},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools genome coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"input_bam_file\":{\"type\":\"file\",\"adapter\":{\"order\":50,\"prefix\":\"-ibam\"}},\"input_region_file\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-g\",\"separator\":\" \",\"order\":51,\"streamable\":false}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"\"],\"stdout\":\"\",\"args\":[]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools genome coverage",
                                "_id": "54bfcee6769d661722c3cf88",
                                "__v": 0,
                                "version": 1
                            }
                        ]
                    },
                    {
                        "_id": "54bfaa9b769d661722c3cf68",
                        "name": "bedtools coverage",
                        "repo": {
                            "__v": 0,
                            "_id": "54bfaa3f769d661722c3cf67",
                            "created_by": "mladenj",
                            "git": false,
                            "name": "bedtools",
                            "owner": "mladenj",
                            "secret": "dc27ef32-9850-4a8d-ae48-34232f1b0991",
                            "user": "54bd1b9286b3c977657736f3",
                            "is_public": true
                        },
                        "user": "54bd1b9286b3c977657736f3",
                        "is_script": false,
                        "revisions": [
                            {
                                "app_id": "54bfaa9b769d661722c3cf68",
                                "job": "{\"inputs\":{\"input_bam\":{\"path\":\"file1.bam\"},\"input_bed\":{\"path\":\"\"},\"regions_bed\":{\"path\":\"regions.bed\"},\"strandedness\":\"different strandedness\",\"histogram\":false,\"depth_per_base\":false,\"split\":false},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"coverageBed\"],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"},\"args\":[{\"order\":20,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strandedness) {\\n      \\n       strand = $job.inputs.strandedness\\n    \\n        \\n       if (strand === \\\"same strandedness\\\") {\\n          return \\\"-s\\\"\\n       } else if (strand === \\\"different strandedness\\\"){\\n          return \\\"-S\\\" \\n       }      \\n       \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.histogram){\\n\\n        hist=$job.inputs.histogram;\\n\\n        if(hist){\\n            return \\\"-hist\\\";\\n        }\\n\\n    }\\n\\n}\"},\"order\":22},{\"order\":23,\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.depth_per_base){\\n\\n        depth=$job.inputs.depth_per_base;\\n\\n        if(depth){\\n            return \\\"-d\\\";\\n        }\\n\\n    }\\n\\n}\"},\"separator\":\" \"},{\"order\":24,\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.split){\\n\\n        split=$job.inputs.split;\\n\\n        if(split){\\n            return \\\"-split\\\";\\n        }\\n\\n    }\\n\\n}\"},\"separator\":\" \"}]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"split\":{\"type\":\"boolean\"},\"strandedness\":{\"enum\":[\"disregard strandedness\",\"same strandedness\",\"different strandedness\"],\"type\":\"string\"},\"input_bam\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-abam\",\"order\":10}},\"input_bed\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-a\",\"order\":11}},\"regions_bed\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-b\",\"order\":12}},\"histogram\":{\"type\":\"boolean\"},\"depth_per_base\":{\"type\":\"boolean\"}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools coverage",
                                "_id": "54bfb952769d661722c3cf7c",
                                "__v": 0,
                                "version": 9
                            },
                            {
                                "app_id": "54bfaa9b769d661722c3cf68",
                                "job": "{\"inputs\":{\"input_bam\":{\"path\":\"file1.bam\"},\"input_bed\":{\"path\":\"\"},\"regions_bed\":{\"path\":\"regions.bed\"},\"strandedness\":\"different strandedness\",\"histogram\":false,\"depth_per_base\":false},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"depth_per_base\":{\"type\":\"boolean\"},\"histogram\":{\"type\":\"boolean\"},\"regions_bed\":{\"adapter\":{\"order\":12,\"prefix\":\"-b\"},\"type\":\"file\"},\"input_bed\":{\"adapter\":{\"order\":11,\"prefix\":\"-a\"},\"type\":\"file\"},\"input_bam\":{\"adapter\":{\"order\":10,\"prefix\":\"-abam\"},\"type\":\"file\"},\"strandedness\":{\"type\":\"string\",\"enum\":[\"disregard strandedness\",\"same strandedness\",\"different strandedness\"]},\"split\":{\"type\":\"boolean\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strandedness) {\\n      \\n       strand = $job.inputs.strandedness\\n    \\n        \\n       if (strand === \\\"same strandedness\\\") {\\n          return \\\"-s\\\"\\n       } else if (strand === \\\"different strandedness\\\"){\\n          return \\\"-S\\\" \\n       }      \\n       \\n    }\\n}\"},\"order\":20},{\"order\":22,\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.histogram){\\n\\n        hist=$job.inputs.histogram;\\n\\n        if(hist){\\n            return \\\"-hist\\\";\\n        }\\n\\n    }\\n\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.depth_per_base){\\n\\n        depth=$job.inputs.depth_per_base;\\n\\n        if(depth){\\n            return \\\"-d\\\";\\n        }\\n\\n    }\\n\\n}\"},\"order\":23},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.split){\\n\\n        split=$job.inputs.split;\\n\\n        if(split){\\n            return \\\"-split\\\";\\n        }\\n\\n    }\\n\\n}\"},\"order\":24}],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"},\"baseCmd\":[\"coverageBed\"]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools coverage",
                                "_id": "54bfb93c769d661722c3cf7b",
                                "__v": 0,
                                "version": 8
                            },
                            {
                                "app_id": "54bfaa9b769d661722c3cf68",
                                "job": "{\"inputs\":{\"input_bam\":{\"path\":\"file1.bam\"},\"input_bed\":{\"path\":\"\"},\"regions_bed\":{\"path\":\"regions.bed\"},\"strandedness\":\"different strandedness\",\"histogram\":false,\"depth_per_base\":false},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"coverageBed\"],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"},\"args\":[{\"order\":20,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strandedness) {\\n      \\n       strand = $job.inputs.strandedness\\n    \\n        \\n       if (strand === \\\"same strandedness\\\") {\\n          return \\\"-s\\\"\\n       } else if (strand === \\\"different strandedness\\\"){\\n          return \\\"-S\\\" \\n       }      \\n       \\n    }\\n}\"},\"separator\":\" \"},{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if(typeof $job.inputs.histogram){\\n\\n        hist=$job.inputs.histogram;\\n\\n        if(hist){\\n            return \\\"-hist\\\";\\n        }\\n\\n    }\\n\\n}\"},\"order\":22}]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"strandedness\":{\"enum\":[\"disregard strandedness\",\"same strandedness\",\"different strandedness\"],\"type\":\"string\"},\"input_bam\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-abam\",\"order\":10}},\"input_bed\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-a\",\"order\":11}},\"regions_bed\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-b\",\"order\":12}},\"histogram\":{\"type\":\"boolean\"},\"depth_per_base\":{\"type\":\"boolean\"}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools coverage",
                                "_id": "54bfb87b769d661722c3cf79",
                                "__v": 0,
                                "version": 7
                            },
                            {
                                "app_id": "54bfaa9b769d661722c3cf68",
                                "job": "{\"inputs\":{\"input_bam\":{\"path\":\"file1.bam\"},\"input_bed\":{\"path\":\"\"},\"regions_bed\":{\"path\":\"regions.bed\"},\"strandedness\":\"different strandedness\"},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"regions_bed\":{\"adapter\":{\"order\":12,\"prefix\":\"-b\"},\"type\":\"file\"},\"input_bed\":{\"adapter\":{\"order\":11,\"prefix\":\"-a\"},\"type\":\"file\"},\"input_bam\":{\"adapter\":{\"order\":10,\"prefix\":\"-abam\"},\"type\":\"file\"},\"strandedness\":{\"type\":\"string\",\"enum\":[\"disregard strandedness\",\"same strandedness\",\"different strandedness\"],\"adapter\":{\"order\":13}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strandedness) {\\n      \\n       strand = $job.inputs.strandedness\\n    \\n        \\n       if (strand === \\\"same strandedness\\\") {\\n          return \\\"-s\\\"\\n       } else if (strand === \\\"different strandedness\\\"){\\n          return \\\"-S\\\" \\n       }      \\n       \\n    }\\n}\"},\"order\":20}],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"},\"baseCmd\":[\"coverageBed\"]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools coverage",
                                "_id": "54bfb77e769d661722c3cf76",
                                "__v": 0,
                                "version": 6
                            },
                            {
                                "app_id": "54bfaa9b769d661722c3cf68",
                                "job": "{\"inputs\":{\"input_bam\":{\"path\":\"file1.bam\"},\"input_bed\":{\"path\":\"\"},\"regions_bed\":{\"path\":\"regions.bed\"},\"strandedness\":null},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"coverageBed\"],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"},\"args\":[{\"order\":20,\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strandedness) {\\n      \\n       strand = $job.inputs.strandedness\\n    \\n        \\n       if (strand === \\\"same strandedness\\\") {\\n          return \\\"-s\\\"\\n       } else if (strand === \\\"different strandedness\\\"){\\n          return \\\"-S\\\" \\n       }      \\n       \\n    }\\n}\"},\"separator\":\" \"}]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"strandedness\":{\"enum\":[\"disregard strandedness\",\"same strandedness\",\"different strandedness\"],\"type\":\"string\"},\"input_bam\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-abam\",\"order\":10}},\"input_bed\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-a\",\"order\":11}},\"regions_bed\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-b\",\"order\":12}}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools coverage",
                                "_id": "54bfb75b769d661722c3cf75",
                                "__v": 0,
                                "version": 5
                            },
                            {
                                "app_id": "54bfaa9b769d661722c3cf68",
                                "job": "{\"inputs\":{\"input_bam\":{\"path\":\"file1.bam\"},\"input_bed\":{\"path\":\"\"},\"regions_bed\":{\"path\":\"regions.bed\"},\"strandedness\":\"same\"},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"regions_bed\":{\"adapter\":{\"order\":12,\"prefix\":\"-b\"},\"type\":\"file\"},\"input_bed\":{\"adapter\":{\"order\":11,\"prefix\":\"-a\"},\"type\":\"file\"},\"input_bam\":{\"adapter\":{\"order\":10,\"prefix\":\"-abam\"},\"type\":\"file\"},\"strandedness\":{\"type\":\"string\",\"enum\":[\"disregard strandedness\",\"same strandedness\",\"different strandedness\"]}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}}}}},\"adapter\":{\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n    if (typeof $job.inputs.strandedness) {\\n      \\n       strand = $job.inputs.strandedness\\n    \\n        \\n       if (strand === \\\"same\\\") {\\n          return \\\"-s\\\"\\n       } else if (strand === \\\"opposite\\\"){\\n          return \\\"-S\\\" \\n       }\\n       \\n       //return strand\\n       //return null\\n    }\\n  \\n    //return null\\n}\"},\"order\":20}],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"},\"baseCmd\":[\"coverageBed\"]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools coverage",
                                "_id": "54bfb723769d661722c3cf72",
                                "__v": 0,
                                "version": 4
                            },
                            {
                                "app_id": "54bfaa9b769d661722c3cf68",
                                "job": "{\"inputs\":{\"input_bam\":{\"path\":\"file1.bam\"},\"input_bed\":{\"path\":\"\"},\"regions_bed\":{\"path\":\"regions.bed\"}},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"coverageBed\"],\"stdout\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"},\"args\":[]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_bam != \\\"undefined\\\" && $job.inputs.input_bam.path){\\n      filepath = $job.inputs.input_bam.path\\n   } else \\n   if (typeof $job.inputs.input_bed != \\\"undefined\\\" && $job.inputs.input_bed.path ){\\n      filepath = $job.inputs.input_bed.path\\n   }     \\n   \\n   input_filename = filepath.split(\\\"/\\\").pop();  \\n  \\n   if (typeof $job.inputs.regions_bed != \\\"undefined\\\" && $job.inputs.regions_bed.path){\\n      regions_filepath = $job.inputs.regions_bed.path\\n   }  \\n  \\n   regions_filename = regions_filepath.split(\\\"/\\\").pop();\\n   \\n   return input_filename + \\\".\\\" + regions_filename + \\\".bed\\\"\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"input_bam\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-abam\",\"order\":10}},\"input_bed\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-a\",\"order\":11}},\"regions_bed\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-b\",\"order\":12}}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools coverage",
                                "_id": "54bfad6a769d661722c3cf6b",
                                "__v": 0,
                                "version": 3
                            },
                            {
                                "app_id": "54bfaa9b769d661722c3cf68",
                                "job": "{\"inputs\":{\"input_bam\":{\"path\":\"\"},\"input_bed\":{\"path\":\"\"}},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"c3b23929d62d\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"type\":\"docker\"}}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"properties\":{\"input_bed\":{\"adapter\":{\"order\":11,\"prefix\":\"-a\"},\"type\":\"file\"},\"input_bam\":{\"adapter\":{\"order\":10,\"prefix\":\"-abam\"},\"type\":\"file\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_vcf_file_1 != \\\"undefined\\\" && $job.inputs.input_vcf_file_1.path){\\n      filepath = $job.inputs.input_vcf_file_1.path\\n   } else \\n   if (typeof $job.inputs.input_vcf_file_2 != \\\"undefined\\\" && $job.inputs.input_vcf_file_2.path ){\\n      filepath = $job.inputs.input_vcf_file_2.path\\n   }     \\n   \\n   filename = filepath.split(\\\"/\\\").pop();           \\n\\n   return filepath.substring(0, filepath.lastIndexOf('/')) + \\\"/\\\" + \\\"*.venn2_statistics.txt\\\"   \\n}\"}}}}},\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"coverageBed\"]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools coverage",
                                "_id": "54bfaabb769d661722c3cf6a",
                                "__v": 0,
                                "version": 2
                            },
                            {
                                "app_id": "54bfaa9b769d661722c3cf68",
                                "job": "{\"inputs\":{\"input_bam\":{\"path\":\"\"},\"input_bed\":{\"path\":\"\"}},\"allocatedResources\":{\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"bedtools coverage\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"coverageBed\"],\"stdout\":\"\",\"args\":[]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"glob\":{\"$expr\":\"{ \\n   filepath = \\\"out.txt\\\"\\n  \\n   if (typeof $job.inputs.input_vcf_file_1 != \\\"undefined\\\" && $job.inputs.input_vcf_file_1.path){\\n      filepath = $job.inputs.input_vcf_file_1.path\\n   } else \\n   if (typeof $job.inputs.input_vcf_file_2 != \\\"undefined\\\" && $job.inputs.input_vcf_file_2.path ){\\n      filepath = $job.inputs.input_vcf_file_2.path\\n   }     \\n   \\n   filename = filepath.split(\\\"/\\\").pop();           \\n\\n   return filepath.substring(0, filepath.lastIndexOf('/')) + \\\"/\\\" + \\\"*.venn2_statistics.txt\\\"   \\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"input_bam\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-abam\",\"order\":10}},\"input_bed\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"-a\",\"order\":11}}},\"required\":[\"reference\",\"reads\",\"STR\",\"input_files\",\"input_files\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"ognjenperisic/ubuntu14.04_bedtools_ogip_sbg:latest\",\"imageId\":\"c3b23929d62d\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "bedtools coverage",
                                "_id": "54bfaa9c769d661722c3cf69",
                                "__v": 0,
                                "version": 1
                            }
                        ]
                    }
                ],
                "mladenj/fastqc": [
                    {
                        "_id": "54be917f769d661722c3cf45",
                        "name": "fastqc",
                        "repo": {
                            "__v": 0,
                            "_id": "54be911b769d661722c3cf44",
                            "created_by": "mladenj",
                            "description": "A repository containing fastqc tool.",
                            "git": false,
                            "name": "fastqc",
                            "owner": "mladenj",
                            "secret": "3f065b04-3d03-4a2e-9913-ea3d23a255a4",
                            "user": "54bd1b9286b3c977657736f3",
                            "is_public": true
                        },
                        "user": "54bd1b9286b3c977657736f3",
                        "is_script": false,
                        "revisions": [
                            {
                                "app_id": "54be917f769d661722c3cf45",
                                "job": "{\"inputs\":{\"input_file\":{\"path\":\"/home/ogi/test/file1.bam\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"fastqc\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"fastqc\",\"--noextract\",\"-o .\",\"--quiet\"],\"stdout\":\"\",\"args\":[]},\"outputs\":{\"properties\":{\"output_archive\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file.path != \\\"undefined\\\" && $job.inputs.input_file){\\n       filepath = $job.inputs.input_file.path\\n   } \\n  \\n   filename = filepath.substr(0, filepath.lastIndexOf('.'))    \\n   \\n   \\n   filename = filename.split('/').pop();   \\n     \\n   return filename.concat(\\\"_fastqc.zip\\\")     \\n}\"}},\"type\":\"file\"},\"output_file\":{\"adapter\":{\"metadata\":{\"__inherit__\":\"input_vcf_file\"},\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file.path != \\\"undefined\\\" && $job.inputs.input_file){\\n       filepath = $job.inputs.input_file.path\\n   } \\n  \\n   filename = filepath.substr(0, filepath.lastIndexOf('.'))    \\n   \\n   \\n   filename = filename.split('/').pop();   \\n     \\n   return filename.concat(\\\"_fastqc.html\\\")     \\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"input_file\":{\"type\":\"file\",\"adapter\":{\"order\":99}}},\"required\":[\"reference\",\"reads\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"\",\"imageId\":\"a6a7f5c9fab8\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "fastqc",
                                "_id": "54be9740769d661722c3cf4e",
                                "__v": 0,
                                "version": 7
                            },
                            {
                                "app_id": "54be917f769d661722c3cf45",
                                "job": "{\"inputs\":{\"input_file\":{\"path\":\"/home/ogi/test/file1.bam\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"fastqc\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"a6a7f5c9fab8\",\"uri\":\"\",\"type\":\"docker\"}}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\"],\"properties\":{\"input_file\":{\"adapter\":{\"order\":99},\"type\":\"file\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file.path != \\\"undefined\\\" && $job.inputs.input_file){\\n       filepath = $job.inputs.input_file.path\\n   } \\n  \\n   filename = filepath.substr(0, filepath.lastIndexOf('.'))    \\n   \\n   \\n   filename = filename.split('/').pop();   \\n     \\n   return filename.concat(\\\"_fastqc.html\\\")     \\n}\"},\"metadata\":{\"__inherit__\":\"input_vcf_file\"}}},\"output_archive\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file.path != \\\"undefined\\\" && $job.inputs.input_file){\\n       filepath = $job.inputs.input_file.path\\n   } \\n  \\n   filename = filepath.substr(0, filepath.lastIndexOf('.'))    \\n   \\n   \\n   filename = filename.split('/').pop();   \\n     \\n   return filename.concat(\\\"_fastqc.zip\\\")     \\n}\"}}}}},\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"fastqc\",\"--noextract\",\"-o .\",\"--quiet\"]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "fastqc",
                                "_id": "54be96d7769d661722c3cf4d",
                                "__v": 0,
                                "version": 6
                            },
                            {
                                "app_id": "54be917f769d661722c3cf45",
                                "job": "{\"inputs\":{\"input_file\":{\"path\":\"/home/ogi/test/file1.bam\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"fastqc\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"fastqc\",\"--noextract\",\"-o .\",\"--quiet\"],\"stdout\":\"\",\"args\":[]},\"outputs\":{\"properties\":{\"output_archive\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file.path != \\\"undefined\\\" && $job.inputs.input_file){\\n       filepath = $job.inputs.input_file.path\\n   } \\n   \\n   \\n   filename = filepath.substr(0, filepath.lastIndexOf('.'))   \\n     \\n   return filename.concat(\\\"_fastqc.zip\\\")\\n}\"}},\"type\":\"file\"},\"output_file\":{\"adapter\":{\"metadata\":{\"__inherit__\":\"input_vcf_file\"},\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file.path != \\\"undefined\\\" && $job.inputs.input_file){\\n       filepath = $job.inputs.input_file.path\\n   } \\n   \\n   \\n   filename = filepath.substr(0, filepath.lastIndexOf('.'))   \\n     \\n   return filename.concat(\\\"_fastqc.html\\\")\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"input_file\":{\"type\":\"file\",\"adapter\":{\"order\":99}}},\"required\":[\"reference\",\"reads\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"\",\"imageId\":\"a6a7f5c9fab8\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "fastqc",
                                "_id": "54be9583769d661722c3cf4a",
                                "__v": 0,
                                "version": 5
                            },
                            {
                                "app_id": "54be917f769d661722c3cf45",
                                "job": "{\"inputs\":{\"input_file\":{\"path\":\"/home/ogi/test/file1.bam\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"fastqc\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"a6a7f5c9fab8\",\"uri\":\"\",\"type\":\"docker\"}}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\"],\"properties\":{\"input_file\":{\"adapter\":{\"order\":99},\"type\":\"file\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file.path != \\\"undefined\\\" && $job.inputs.input_file){\\n       filepath = $job.inputs.input_file.path\\n   } \\n   \\n   \\n   filename = filepath.substr(0, filepath.lastIndexOf('.'))   \\n     \\n   return filename.concat(\\\"_fastqc.html\\\")\\n}\"},\"metadata\":{\"__inherit__\":\"input_vcf_file\"}}},\"output_archive\":{\"type\":\"file\",\"adapter\":{\"metadata\":{},\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file.path != \\\"undefined\\\" && $job.inputs.input_file){\\n       filepath = $job.inputs.input_file.path\\n   } \\n   \\n   \\n   filename = filepath.substr(0, filepath.lastIndexOf('.'))   \\n     \\n   return filename.concat(\\\"_fastqc.zip\\\")\\n}\"}}}}},\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"fastqc\"]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "fastqc",
                                "_id": "54be9469769d661722c3cf49",
                                "__v": 0,
                                "version": 4
                            },
                            {
                                "app_id": "54be917f769d661722c3cf45",
                                "job": "{\"inputs\":{\"input_file\":{\"path\":\"/home/ogi/test/file1.bam\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"fastqc\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"fastqc\"],\"stdout\":\"\",\"args\":[]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"metadata\":{\"__inherit__\":\"input_vcf_file\"},\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file.path != \\\"undefined\\\" && $job.inputs.input_file){\\n       filepath = $job.inputs.input_file.path\\n   } \\n   \\n   \\n   filename = filepath.substr(0, filepath.lastIndexOf('.'))   \\n     \\n   return filename.concat(\\\"_fastqc.zip\\\")\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"input_file\":{\"type\":\"file\",\"adapter\":{\"order\":99}}},\"required\":[\"reference\",\"reads\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"\",\"imageId\":\"a6a7f5c9fab8\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "fastqc",
                                "_id": "54be940b769d661722c3cf48",
                                "__v": 0,
                                "version": 3
                            },
                            {
                                "app_id": "54be917f769d661722c3cf45",
                                "job": "{\"inputs\":{\"input_file\":{\"path\":\"/home/ogi/test/file1.bam\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"fastqc\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"ogip\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":5000,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"a6a7f5c9fab8\",\"uri\":\"\",\"type\":\"docker\"}}},\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\"],\"properties\":{\"input_file\":{\"adapter\":{\"order\":99},\"type\":\"file\"}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"output_file\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file_1.path != \\\"undefined\\\"){\\n       filepath = $job.inputs.input_file_1.path\\n   } \\n   \\n   \\n   filename = filepath.split(\\\"/\\\").pop();   \\n        \\n   number_of_elements = filename.split('.').length\\n   filextension = filename.split('.')[number_of_elements-1]\\n        \\n   shortened_filename = filename.substr(0, filename.length-4)\\n    \\n   if (filextension==\\\"gz\\\") {\\n      shortened_filename = shortened_filename.substr(0, shortened_filename.length-3)\\n   }     \\n     \\n   return shortened_filename.concat(\\\".and_other.isec.vcf\\\")\\n}\"},\"metadata\":{\"__inherit__\":\"input_vcf_file\"}}}}},\"adapter\":{\"args\":[],\"stdout\":\"\",\"baseCmd\":[\"fastqc\"]},\"@type\":\"CommandLine\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "fastqc",
                                "_id": "54be930e769d661722c3cf47",
                                "__v": 0,
                                "version": 2
                            },
                            {
                                "app_id": "54be917f769d661722c3cf45",
                                "job": "{\"inputs\":{\"input_file\":{\"path\":\"file1.bam\"}},\"allocatedResources\":{\"cpu\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"fastqc\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"adapter\":{\"baseCmd\":[\"fastqc\"],\"stdout\":\"\",\"args\":[]},\"outputs\":{\"properties\":{\"output_file\":{\"adapter\":{\"metadata\":{\"__inherit__\":\"input_vcf_file\"},\"glob\":{\"$expr\":\"{\\n   if (typeof $job.inputs.input_file_1.path != \\\"undefined\\\"){\\n       filepath = $job.inputs.input_file_1.path\\n   } \\n   \\n   \\n   filename = filepath.split(\\\"/\\\").pop();   \\n        \\n   number_of_elements = filename.split('.').length\\n   filextension = filename.split('.')[number_of_elements-1]\\n        \\n   shortened_filename = filename.substr(0, filename.length-4)\\n    \\n   if (filextension==\\\"gz\\\") {\\n      shortened_filename = shortened_filename.substr(0, shortened_filename.length-3)\\n   }     \\n     \\n   return shortened_filename.concat(\\\".and_other.isec.vcf\\\")\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"input_file\":{\"type\":\"file\",\"adapter\":{\"order\":99}}},\"required\":[\"reference\",\"reads\"],\"type\":\"object\"},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"\",\"imageId\":\"a6a7f5c9fab8\"}},\"resources\":{\"cpu\":0,\"mem\":5000,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"documentAuthor\":\"ogip\"}",
                                "author": "ogip",
                                "description": "",
                                "name": "fastqc",
                                "_id": "54be917f769d661722c3cf46",
                                "__v": 0,
                                "version": 1
                            }
                        ]
                    }
                ],
                "tziotas/VarScan2": [
                    {
                        "_id": "54b561f3f30ca77959621412",
                        "name": "Varscan2 Filter",
                        "repo": {
                            "__v": 0,
                            "_id": "549d930b9f934077618e08a5",
                            "created_by": "tziotas",
                            "description": "",
                            "git": false,
                            "name": "VarScan2",
                            "owner": "tziotas",
                            "secret": "3546bc16-77a7-4444-8fe3-83b8c4654c9c",
                            "user": "549d8a3b9f934077618e08a0",
                            "is_public": true
                        },
                        "user": "549d8a3b9f934077618e08a0",
                        "is_script": false,
                        "revisions": [
                            {
                                "app_id": "54b561f3f30ca77959621412",
                                "job": "{\"inputs\":{\"InDel\":{\"path\":{}},\"Variant\":{\"path\":{}}},\"allocatedResources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"Varscan2 Filter\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"tziotas/varscan2:latest\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"prefix\":\"--output-file\",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Variant.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('filtered').concat('vcf')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":2,\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar filter\"]},\"outputs\":{\"properties\":{\"Filtered\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Variant.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('filtered').concat('vcf')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"Variant\"}},\"type\":\"file\"}},\"required\":[\"sam\",\"CopyNumber\",\"Filtered\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"p_value\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--p-value\",\"order\":8},\"type\":\"number\"},\"min_var_freq\":{\"adapter\":{\"separator\":\" \",\"order\":7,\"prefix\":\"--min-var-freq\"},\"type\":\"number\"},\"min_avg_qual\":{\"adapter\":{\"separator\":\" \",\"order\":6,\"prefix\":\"--min-avg-qual\"},\"type\":\"integer\"},\"min_strands2\":{\"adapter\":{\"separator\":\" \",\"order\":5,\"prefix\":\"--min-strands2\"},\"type\":\"integer\"},\"min_reads2\":{\"adapter\":{\"order\":4,\"separator\":\" \",\"prefix\":\"--min-reads2\"},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-coverage\",\"order\":3},\"type\":\"integer\"},\"InDel\":{\"adapter\":{\"order\":1,\"prefix\":\"--indel-file\"},\"type\":\"file\"},\"Variant\":{\"adapter\":{\"order\":0},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"Variant\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 Filter",
                                "_id": "54c12b59769d661722c3d00c",
                                "__v": 0,
                                "version": 4
                            },
                            {
                                "app_id": "54b561f3f30ca77959621412",
                                "job": "{\"inputs\":{\"InDel\":{\"path\":{}},\"Variant\":{\"path\":{}}},\"allocatedResources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"Varscan2 Filter\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"Variant\"],\"properties\":{\"Variant\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"InDel\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"--indel-file\",\"order\":1}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":3,\"prefix\":\"--min-coverage\",\"separator\":\" \"}},\"min_reads2\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-reads2\",\"separator\":\" \",\"order\":4}},\"min_strands2\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-strands2\",\"order\":5,\"separator\":\" \"}},\"min_avg_qual\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-avg-qual\",\"order\":6,\"separator\":\" \"}},\"min_var_freq\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--min-var-freq\",\"order\":7,\"separator\":\" \"}},\"p_value\":{\"type\":\"number\",\"adapter\":{\"order\":8,\"prefix\":\"--p-value\",\"separator\":\" \"}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\",\"CopyNumber\",\"Filtered\"],\"properties\":{\"Filtered\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"__inherit__\":\"Variant\"},\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Variant.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('filtered').concat('vcf')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar filter\"],\"stdout\":\"\",\"args\":[{\"separator\":\" \",\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Variant.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('filtered').concat('vcf')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"prefix\":\"--output-file\"}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"tziotas/varscan2\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 Filter",
                                "_id": "54c10b30769d661722c3cfea",
                                "__v": 0,
                                "version": 3
                            },
                            {
                                "app_id": "54b561f3f30ca77959621412",
                                "job": "{\"inputs\":{\"InDel\":{},\"Variant\":{}},\"allocatedResources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"Varscan2 Filter\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"VarScan2_CopyNumber\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"prefix\":\"--output-file\",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Variant.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('filtered').concat('vcf')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":2,\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar filter\"]},\"outputs\":{\"properties\":{\"Filtered\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Variant.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('filtered').concat('vcf')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"Variant\"}},\"type\":\"file\"}},\"required\":[\"sam\",\"CopyNumber\",\"Filtered\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"p_value\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--p-value\",\"order\":8},\"type\":\"number\"},\"min_var_freq\":{\"adapter\":{\"separator\":\" \",\"order\":7,\"prefix\":\"--min-var-freq\"},\"type\":\"number\"},\"min_avg_qual\":{\"adapter\":{\"separator\":\" \",\"order\":6,\"prefix\":\"--min-avg-qual\"},\"type\":\"integer\"},\"min_strands2\":{\"adapter\":{\"separator\":\" \",\"order\":5,\"prefix\":\"--min-strands2\"},\"type\":\"integer\"},\"min_reads2\":{\"adapter\":{\"order\":4,\"separator\":\" \",\"prefix\":\"--min-reads2\"},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-coverage\",\"order\":3},\"type\":\"integer\"},\"InDel\":{\"adapter\":{\"order\":1,\"prefix\":\"--indel-file\"},\"type\":\"file\"},\"Variant\":{\"adapter\":{\"order\":0},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"Variant\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 Filter",
                                "_id": "54be49e186b3c9776577373d",
                                "__v": 0,
                                "version": 2
                            },
                            {
                                "app_id": "54b561f3f30ca77959621412",
                                "json": "{\"name\":\"Varscan2 Filter\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"Variant\"],\"properties\":{\"Variant\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"InDel\":{\"type\":\"file\",\"adapter\":{\"prefix\":\"--indel-file\",\"order\":1}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":3,\"prefix\":\"--min-coverage\",\"separator\":\" \"}},\"min_reads2\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-reads2\",\"separator\":\" \",\"order\":4}},\"min_strands2\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-strands2\",\"order\":5,\"separator\":\" \"}},\"min_avg_qual\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-avg-qual\",\"order\":6,\"separator\":\" \"}},\"min_var_freq\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--min-var-freq\",\"order\":7,\"separator\":\" \"}},\"p_value\":{\"type\":\"number\",\"adapter\":{\"order\":8,\"prefix\":\"--p-value\",\"separator\":\" \"}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\",\"CopyNumber\"],\"properties\":{\"Filtered\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Variant.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('filtered').concat('vcf')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar filter\"],\"stdout\":\"\",\"args\":[{\"separator\":\" \",\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Variant.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('filtered').concat('vcf')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"prefix\":\"--output-file\"}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 Filter",
                                "_id": "54b561f3f30ca77959621413",
                                "__v": 0,
                                "version": 1
                            }
                        ]
                    },
                    {
                        "_id": "54b5576ff30ca77959621409",
                        "name": "Varscan2 CopyCaller",
                        "repo": {
                            "__v": 0,
                            "_id": "549d930b9f934077618e08a5",
                            "created_by": "tziotas",
                            "description": "",
                            "git": false,
                            "name": "VarScan2",
                            "owner": "tziotas",
                            "secret": "3546bc16-77a7-4444-8fe3-83b8c4654c9c",
                            "user": "549d8a3b9f934077618e08a0",
                            "is_public": true
                        },
                        "user": "549d8a3b9f934077618e08a0",
                        "is_script": false,
                        "revisions": [
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "job": "{\"inputs\":{\"CopyNumber\":{\"path\":{}}},\"allocatedResources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"CopyNumber\"],\"properties\":{\"recenter_down\":{\"adapter\":{\"order\":11,\"separator\":\" \",\"prefix\":\"--recenter-down\"},\"type\":\"number\"},\"recenter_up\":{\"adapter\":{\"order\":10,\"prefix\":\"--recenter-up\"},\"type\":\"number\"},\"min_region_size\":{\"adapter\":{\"order\":9,\"prefix\":\"--min-region-size\"},\"type\":\"integer\"},\"del_threshold\":{\"adapter\":{\"order\":8,\"prefix\":\"--del-threshold\"},\"type\":\"number\"},\"amp_threshold\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--amp-threshold\",\"order\":7},\"type\":\"number\"},\"export_homozygous_deletions\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"\\\\\",\"order\":3}},\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":4}},\"min_tumor_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-tumor-coverage\",\"order\":5,\"separator\":\" \"}},\"max_homdel_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--max-homdel-coverage\",\"separator\":\" \"}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"GC\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller').concat('gc')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"CopyNumber\"}},\"type\":\"file\"},\"HomozygousDeletion\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"CopyNumber\"}},\"type\":\"file\"},\"CopyCaller\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"CopyNumber\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"],\"stdout\":\"\",\"args\":[{\"prefix\":\"--output-file\",\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":1},{\"separator\":\" \",\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n   \\n    //-----------------------------------------------------\\n    if ($job.inputs.export_homozygous_deletions)\\n    {\\n\\t\\treturn \\\"--output-homdel-file \\\".concat(retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, ''))\\n    }\\n}\\n\\n\\n\"},\"prefix\":\"\"}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"tziotas/varscan2:latest\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54c12b60769d661722c3d00d",
                                "__v": 0,
                                "version": 10
                            },
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "job": "{\"inputs\":{\"CopyNumber\":{\"path\":{}}},\"allocatedResources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"tziotas/varscan2\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \",\"prefix\":\"--output-file\"},{\"prefix\":\"\",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n   \\n    //-----------------------------------------------------\\n    if ($job.inputs.export_homozygous_deletions)\\n    {\\n\\t\\treturn \\\"--output-homdel-file \\\".concat(retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, ''))\\n    }\\n}\\n\\n\\n\"},\"order\":2,\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"]},\"outputs\":{\"properties\":{\"CopyCaller\":{\"adapter\":{\"metadata\":{\"__inherit__\":\"CopyNumber\"},\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"},\"HomozygousDeletion\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"__inherit__\":\"CopyNumber\"},\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}},\"GC\":{\"type\":\"file\",\"adapter\":{\"metadata\":{\"__inherit__\":\"CopyNumber\"},\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller').concat('gc')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"max_homdel_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--max-homdel-coverage\",\"order\":6},\"type\":\"integer\"},\"min_tumor_coverage\":{\"adapter\":{\"separator\":\" \",\"order\":5,\"prefix\":\"--min-tumor-coverage\"},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":4,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"CopyNumber\":{\"adapter\":{\"order\":0},\"type\":\"file\"},\"export_homozygous_deletions\":{\"adapter\":{\"order\":3,\"prefix\":\"\\\\\"},\"type\":\"boolean\"},\"amp_threshold\":{\"type\":\"number\",\"adapter\":{\"order\":7,\"prefix\":\"--amp-threshold\",\"separator\":\" \"}},\"del_threshold\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--del-threshold\",\"order\":8}},\"min_region_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-region-size\",\"order\":9}},\"recenter_up\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--recenter-up\",\"order\":10}},\"recenter_down\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--recenter-down\",\"separator\":\" \",\"order\":11}}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"CopyNumber\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54c10b34769d661722c3cfeb",
                                "__v": 0,
                                "version": 9
                            },
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "job": "{\"inputs\":{\"CopyNumber\":{}},\"allocatedResources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"CopyNumber\"],\"properties\":{\"recenter_down\":{\"adapter\":{\"order\":11,\"separator\":\" \",\"prefix\":\"--recenter-down\"},\"type\":\"number\"},\"recenter_up\":{\"adapter\":{\"order\":10,\"prefix\":\"--recenter-up\"},\"type\":\"number\"},\"min_region_size\":{\"adapter\":{\"order\":9,\"prefix\":\"--min-region-size\"},\"type\":\"integer\"},\"del_threshold\":{\"adapter\":{\"order\":8,\"prefix\":\"--del-threshold\"},\"type\":\"number\"},\"amp_threshold\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--amp-threshold\",\"order\":7},\"type\":\"number\"},\"export_homozygous_deletions\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"\\\\\",\"order\":3}},\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":4}},\"min_tumor_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-tumor-coverage\",\"order\":5,\"separator\":\" \"}},\"max_homdel_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--max-homdel-coverage\",\"separator\":\" \"}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"GC\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller').concat('gc')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"CopyNumber\"}},\"type\":\"file\"},\"HomozygousDeletion\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"CopyNumber\"}},\"type\":\"file\"},\"CopyCaller\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"CopyNumber\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"],\"stdout\":\"\",\"args\":[{\"prefix\":\"--output-file\",\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":1},{\"separator\":\" \",\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n   \\n    //-----------------------------------------------------\\n    if ($job.inputs.export_homozygous_deletions)\\n    {\\n\\t\\treturn \\\"--output-homdel-file \\\".concat(retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, ''))\\n    }\\n}\\n\\n\\n\"},\"prefix\":\"\"}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54be4a4d86b3c9776577373e",
                                "__v": 0,
                                "version": 8
                            },
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"VarScan2_CopyNumber\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \",\"prefix\":\"--output-file\"},{\"prefix\":\"\",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n   \\n    //-----------------------------------------------------\\n    if ($job.inputs.export_homozygous_deletions)\\n    {\\n\\t\\treturn \\\"--output-homdel-file \\\".concat(retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, ''))\\n    }\\n}\\n\\n\\n\"},\"order\":2,\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"]},\"outputs\":{\"properties\":{\"CopyCaller\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"},\"HomozygousDeletion\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}},\"GC\":{\"type\":\"file\",\"adapter\":{\"metadata\":{},\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller').concat('gc')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}},\"required\":[\"sam\",\"CopyCaller\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"max_homdel_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--max-homdel-coverage\",\"order\":6},\"type\":\"integer\"},\"min_tumor_coverage\":{\"adapter\":{\"separator\":\" \",\"order\":5,\"prefix\":\"--min-tumor-coverage\"},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":4,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"CopyNumber\":{\"adapter\":{\"order\":0},\"type\":\"file\"},\"export_homozygous_deletions\":{\"adapter\":{\"order\":3,\"prefix\":\"\\\\\"},\"type\":\"boolean\"},\"amp_threshold\":{\"type\":\"number\",\"adapter\":{\"order\":7,\"prefix\":\"--amp-threshold\",\"separator\":\" \"}},\"del_threshold\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--del-threshold\",\"order\":8}},\"min_region_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-region-size\",\"order\":9}},\"recenter_up\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--recenter-up\",\"order\":10}},\"recenter_down\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--recenter-down\",\"separator\":\" \",\"order\":11}}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"CopyNumber\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54b55ddff30ca77959621410",
                                "__v": 0,
                                "version": 7
                            },
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"CopyNumber\"],\"properties\":{\"recenter_down\":{\"adapter\":{\"order\":11,\"separator\":\" \",\"prefix\":\"--recenter-down\"},\"type\":\"number\"},\"recenter_up\":{\"adapter\":{\"order\":10,\"prefix\":\"--recenter-up\"},\"type\":\"number\"},\"min_region_size\":{\"adapter\":{\"order\":9,\"prefix\":\"--min-region-size\"},\"type\":\"integer\"},\"del_threshold\":{\"adapter\":{\"order\":8,\"prefix\":\"--del-threshold\"},\"type\":\"number\"},\"amp_threshold\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--amp-threshold\",\"order\":7},\"type\":\"number\"},\"export_homozygous_deletions\":{\"type\":\"boolean\",\"adapter\":{\"prefix\":\"\\\\\",\"order\":3}},\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":4}},\"min_tumor_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-tumor-coverage\",\"order\":5,\"separator\":\" \"}},\"max_homdel_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--max-homdel-coverage\",\"separator\":\" \"}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"HomozygousDeletion\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"},\"CopyCaller\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"],\"stdout\":\"\",\"args\":[{\"prefix\":\"--output-file\",\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":1},{\"separator\":\" \",\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n   \\n    //-----------------------------------------------------\\n    if ($job.inputs.export_homozygous_deletions)\\n    {\\n\\t\\treturn \\\"--output-homdel-file \\\".concat(retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, ''))\\n    }\\n}\\n\\n\\n\"},\"prefix\":\"\"}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54b55d1df30ca7795962140f",
                                "__v": 0,
                                "version": 6
                            },
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"VarScan2_CopyNumber\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \",\"prefix\":\"--output-file\"},{\"prefix\":\"\",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n   \\n    //-----------------------------------------------------\\n    if ($job.inputs.export_homozygous_deletions)\\n    {\\n\\t\\treturn \\\"--output-homdel-file \\\".concat(retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, ''))\\n    }\\n}\\n\\n\\n\"},\"order\":2,\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"]},\"outputs\":{\"properties\":{\"CopyCaller\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"},\"HomozygousDeletion\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"max_homdel_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--max-homdel-coverage\",\"order\":6},\"type\":\"integer\"},\"min_tumor_coverage\":{\"adapter\":{\"separator\":\" \",\"order\":5,\"prefix\":\"--min-tumor-coverage\"},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":4,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"CopyNumber\":{\"adapter\":{\"order\":0},\"type\":\"file\"},\"export_homozygous_deletions\":{\"adapter\":{\"order\":3,\"prefix\":\"\"},\"type\":\"boolean\"},\"amp_threshold\":{\"type\":\"number\",\"adapter\":{\"order\":7,\"prefix\":\"--amp-threshold\",\"separator\":\" \"}},\"del_threshold\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--del-threshold\",\"order\":8}},\"min_region_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-region-size\",\"order\":9}},\"recenter_up\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--recenter-up\",\"order\":10}},\"recenter_down\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--recenter-down\",\"separator\":\" \",\"order\":11}}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"CopyNumber\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54b55ce2f30ca7795962140e",
                                "__v": 0,
                                "version": 5
                            },
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\",\"CopyNumber\"],\"properties\":{\"recenter_down\":{\"adapter\":{\"order\":11,\"separator\":\" \",\"prefix\":\"--recenter-down\"},\"type\":\"number\"},\"recenter_up\":{\"adapter\":{\"order\":10,\"prefix\":\"--recenter-up\"},\"type\":\"number\"},\"min_region_size\":{\"adapter\":{\"order\":9,\"prefix\":\"--min-region-size\"},\"type\":\"integer\"},\"del_threshold\":{\"adapter\":{\"order\":8,\"prefix\":\"--del-threshold\"},\"type\":\"number\"},\"amp_threshold\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--amp-threshold\",\"order\":7},\"type\":\"number\"},\"export_homozygous_deletions\":{\"type\":\"boolean\",\"adapter\":{\"order\":3}},\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":4}},\"min_tumor_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-tumor-coverage\",\"order\":5,\"separator\":\" \"}},\"max_homdel_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--max-homdel-coverage\",\"separator\":\" \"}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"HomozygousDeletion\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"},\"CopyCaller\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"],\"stdout\":\"\",\"args\":[{\"prefix\":\"--output-file\",\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":1},{\"separator\":\" \",\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n   \\n    //-----------------------------------------------------\\n    if ($job.inputs.export_homozygous_deletions)\\n    {\\n\\t\\treturn \\\"--output-homdel-file \\\".concat(retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, ''))\\n    }\\n}\\n\\n\\n\"},\"prefix\":\"\"}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54b55b59f30ca7795962140d",
                                "__v": 0,
                                "version": 4
                            },
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"VarScan2_CopyNumber\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \",\"prefix\":\"--output-file\"},{\"prefix\":\"\",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n   \\n    //-----------------------------------------------------\\n    if ($job.inputs.export_homozygous_deletions)\\n    {\\n\\t\\treturn \\\"--output-homdel-file \\\".concat(retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, ''))\\n    }\\n}\\n\\n\\n\"},\"order\":2,\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"]},\"outputs\":{\"properties\":{\"CopyCaller\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"},\"HomozygousDeletion\":{\"type\":\"file\",\"adapter\":{\"metadata\":{},\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"max_homdel_coverage\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--max-homdel-coverage\",\"order\":6},\"type\":\"integer\"},\"min_tumor_coverage\":{\"adapter\":{\"separator\":\" \",\"order\":5,\"prefix\":\"--min-tumor-coverage\"},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":4,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"CopyNumber\":{\"adapter\":{\"order\":0},\"type\":\"file\"},\"export_homozygous_deletions\":{\"adapter\":{\"order\":3},\"type\":\"boolean\"},\"amp_threshold\":{\"type\":\"number\",\"adapter\":{\"order\":7,\"prefix\":\"--amp-threshold\",\"separator\":\" \"}},\"del_threshold\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--del-threshold\",\"order\":8}},\"min_region_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-region-size\",\"order\":9}},\"recenter_up\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--recenter-up\",\"order\":10}},\"recenter_down\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--recenter-down\",\"separator\":\" \",\"order\":11}}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54b55a8af30ca7795962140c",
                                "__v": 0,
                                "version": 3
                            },
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"properties\":{\"export_homozygous_deletions\":{\"type\":\"boolean\",\"adapter\":{\"order\":3}},\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":4}},\"min_tumor_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-tumor-coverage\",\"order\":5,\"separator\":\" \"}},\"max_homdel_coverage\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--max-homdel-coverage\",\"separator\":\" \"}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"CopyCaller\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"],\"stdout\":\"\",\"args\":[{\"prefix\":\"--output-file\",\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":1},{\"separator\":\" \",\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('homdel')\\n   \\n    //-----------------------------------------------------\\n    if ($job.inputs.export_homozygous_deletions)\\n    {\\n\\t\\treturn \\\"--output-homdel-file \\\".concat(retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, ''))\\n    }\\n}\\n\\n\\n\"},\"prefix\":\"\"}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54b55978f30ca7795962140b",
                                "__v": 0,
                                "version": 2
                            },
                            {
                                "app_id": "54b5576ff30ca77959621409",
                                "json": "{\"name\":\"Varscan2 CopyCaller\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"VarScan2_CopyNumber\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":1,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.CopyNumber.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename.concat('copycaller')\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \",\"prefix\":\"--output-file\"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copyCaller\"]},\"outputs\":{\"properties\":{\"CopyCaller\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"min_coverage\":{\"adapter\":{\"order\":2,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"CopyNumber\":{\"adapter\":{\"order\":0},\"type\":\"file\"},\"export_homozygous_deletions\":{\"type\":\"boolean\"}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyCaller",
                                "_id": "54b5576ff30ca7795962140a",
                                "__v": 0,
                                "version": 1
                            }
                        ]
                    },
                    {
                        "_id": "549d935a9f934077618e08a6",
                        "name": "Varscan2 CopyNumber",
                        "repo": {
                            "__v": 0,
                            "_id": "549d930b9f934077618e08a5",
                            "created_by": "tziotas",
                            "description": "",
                            "git": false,
                            "name": "VarScan2",
                            "owner": "tziotas",
                            "secret": "3546bc16-77a7-4444-8fe3-83b8c4654c9c",
                            "user": "549d8a3b9f934077618e08a0",
                            "is_public": true
                        },
                        "user": "549d8a3b9f934077618e08a0",
                        "is_script": false,
                        "revisions": [
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "job": "{\"inputs\":{\"Normal\":{\"path\":{}},\"Tumor\":{\"path\":{}}},\"allocatedResources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"properties\":{\"Normal\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"Tumor\":{\"type\":\"file\",\"adapter\":{\"order\":1}},\"min_base_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":3,\"prefix\":\"--min-base-qual\",\"separator\":\" \"}},\"min_map_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":4,\"prefix\":\"--min-map-qual\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":5}},\"min_segment_size\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--min-segment-size\",\"separator\":\" \"}},\"max_segment_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--max-segment-size\",\"separator\":\" \",\"order\":7}},\"p_value\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--p-value\",\"order\":8,\"separator\":\" \"}},\"data_ratio\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--data-ratio\",\"order\":9}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"Normal\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copynumber\"],\"stdout\":\"\",\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":2}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"tziotas/varscan2:latest\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "54c12b68769d661722c3d00e",
                                "__v": 0,
                                "version": 13
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "job": "{\"inputs\":{\"Normal\":{\"path\":{}},\"Tumor\":{\"path\":{}}},\"allocatedResources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"tziotas/varscan2\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copynumber\"]},\"outputs\":{\"properties\":{\"CopyNumber\":{\"adapter\":{\"metadata\":{\"__inherit__\":\"Normal\"},\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"data_ratio\":{\"adapter\":{\"order\":9,\"prefix\":\"--data-ratio\"},\"type\":\"number\"},\"p_value\":{\"adapter\":{\"separator\":\" \",\"order\":8,\"prefix\":\"--p-value\"},\"type\":\"number\"},\"max_segment_size\":{\"adapter\":{\"order\":7,\"separator\":\" \",\"prefix\":\"--max-segment-size\"},\"type\":\"integer\"},\"min_segment_size\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-segment-size\",\"order\":6},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":5,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"min_map_quality\":{\"adapter\":{\"prefix\":\"--min-map-qual\",\"order\":4},\"type\":\"integer\"},\"min_base_quality\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-base-qual\",\"order\":3},\"type\":\"integer\"},\"Tumor\":{\"adapter\":{\"order\":1},\"type\":\"file\"},\"Normal\":{\"adapter\":{\"order\":0},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "54c10b39769d661722c3cfec",
                                "__v": 0,
                                "version": 12
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "job": "{\"inputs\":{\"Normal\":{},\"Tumor\":{}},\"allocatedResources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}}",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"properties\":{\"Normal\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"Tumor\":{\"type\":\"file\",\"adapter\":{\"order\":1}},\"min_base_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":3,\"prefix\":\"--min-base-qual\",\"separator\":\" \"}},\"min_map_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":4,\"prefix\":\"--min-map-qual\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":5}},\"min_segment_size\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--min-segment-size\",\"separator\":\" \"}},\"max_segment_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--max-segment-size\",\"separator\":\" \",\"order\":7}},\"p_value\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--p-value\",\"order\":8,\"separator\":\" \"}},\"data_ratio\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--data-ratio\",\"order\":9}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"metadata\":{\"__inherit__\":\"Normal\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copynumber\"],\"stdout\":\"\",\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":2}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "54be4a6286b3c9776577373f",
                                "__v": 0,
                                "version": 11
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"VarScan2_CopyNumber\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copynumber\"]},\"outputs\":{\"properties\":{\"CopyNumber\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\",\"CopyNumber\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"data_ratio\":{\"adapter\":{\"order\":9,\"prefix\":\"--data-ratio\"},\"type\":\"number\"},\"p_value\":{\"adapter\":{\"separator\":\" \",\"order\":8,\"prefix\":\"--p-value\"},\"type\":\"number\"},\"max_segment_size\":{\"adapter\":{\"order\":7,\"separator\":\" \",\"prefix\":\"--max-segment-size\"},\"type\":\"integer\"},\"min_segment_size\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-segment-size\",\"order\":6},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":5,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"min_map_quality\":{\"adapter\":{\"prefix\":\"--min-map-qual\",\"order\":4},\"type\":\"integer\"},\"min_base_quality\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-base-qual\",\"order\":3},\"type\":\"integer\"},\"Tumor\":{\"adapter\":{\"order\":1},\"type\":\"file\"},\"Normal\":{\"adapter\":{\"order\":0},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "54b55dfcf30ca77959621411",
                                "__v": 0,
                                "version": 10
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"properties\":{\"Normal\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"Tumor\":{\"type\":\"file\",\"adapter\":{\"order\":1}},\"min_base_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":3,\"prefix\":\"--min-base-qual\",\"separator\":\" \"}},\"min_map_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":4,\"prefix\":\"--min-map-qual\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":5}},\"min_segment_size\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--min-segment-size\",\"separator\":\" \"}},\"max_segment_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--max-segment-size\",\"separator\":\" \",\"order\":7}},\"p_value\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--p-value\",\"order\":8,\"separator\":\" \"}},\"data_ratio\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--data-ratio\",\"order\":9}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar /VarScan.v2.3.7.jar copynumber\"],\"stdout\":\"\",\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":2}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber\",\"imageId\":\"e1a08878eccd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "54b54e377d332452564c8481",
                                "__v": 0,
                                "version": 9
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"e1a08878eccd\",\"uri\":\"VarScan2_CopyNumber\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar VarScan.v2.3.7.jar copynumber\"]},\"outputs\":{\"properties\":{\"CopyNumber\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"data_ratio\":{\"adapter\":{\"order\":9,\"prefix\":\"--data-ratio\"},\"type\":\"number\"},\"p_value\":{\"adapter\":{\"separator\":\" \",\"order\":8,\"prefix\":\"--p-value\"},\"type\":\"number\"},\"max_segment_size\":{\"adapter\":{\"order\":7,\"separator\":\" \",\"prefix\":\"--max-segment-size\"},\"type\":\"integer\"},\"min_segment_size\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-segment-size\",\"order\":6},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":5,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"min_map_quality\":{\"adapter\":{\"prefix\":\"--min-map-qual\",\"order\":4},\"type\":\"integer\"},\"min_base_quality\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-base-qual\",\"order\":3},\"type\":\"integer\"},\"Tumor\":{\"adapter\":{\"order\":1},\"type\":\"file\"},\"Normal\":{\"adapter\":{\"order\":0},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "54b54df17d332452564c8480",
                                "__v": 0,
                                "version": 8
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\",\"Normal\",\"Tumor\"],\"properties\":{\"Normal\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"Tumor\":{\"type\":\"file\",\"adapter\":{\"order\":1}},\"min_base_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":3,\"prefix\":\"--min-base-qual\",\"separator\":\" \"}},\"min_map_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":4,\"prefix\":\"--min-map-qual\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":5}},\"min_segment_size\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--min-segment-size\",\"separator\":\" \"}},\"max_segment_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--max-segment-size\",\"separator\":\" \",\"order\":7}},\"p_value\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--p-value\",\"order\":8,\"separator\":\" \"}},\"data_ratio\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--data-ratio\",\"order\":9}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar VarScan.v2.3.7.jar copynumber\"],\"stdout\":\"\",\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":2}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber\",\"imageId\":\"80d67a58c9cd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "54b534f24ba252842bc53a40",
                                "__v": 0,
                                "version": 7
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"80d67a58c9cd\",\"uri\":\"VarScan2_CopyNumber\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar VarScan.v2.3.7.jar copynumber\"]},\"outputs\":{\"properties\":{\"CopyNumber\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"data_ratio\":{\"adapter\":{\"order\":9,\"prefix\":\"--data-ratio\"},\"type\":\"number\"},\"p_value\":{\"adapter\":{\"separator\":\" \",\"order\":8,\"prefix\":\"--p-value\"},\"type\":\"number\"},\"max_segment_size\":{\"adapter\":{\"order\":7,\"separator\":\" \",\"prefix\":\"--max-segment-size\"},\"type\":\"integer\"},\"min_segment_size\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-segment-size\",\"order\":6},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":5,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"min_map_quality\":{\"adapter\":{\"prefix\":\"--min-map-qual\",\"order\":4},\"type\":\"integer\"},\"min_base_quality\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-base-qual\",\"order\":3},\"type\":\"integer\"},\"Tumor\":{\"adapter\":{\"order\":1},\"type\":\"file\"},\"Normal\":{\"adapter\":{\"order\":0},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "54a3cfb69f934077618e0906",
                                "__v": 0,
                                "version": 6
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\"],\"properties\":{\"Normal\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"Tumor\":{\"type\":\"file\",\"adapter\":{\"order\":1}},\"min_base_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":3,\"prefix\":\"--min-base-qual\",\"separator\":\" \"}},\"min_map_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":4,\"prefix\":\"--min-map-qual\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":5}},\"min_segment_size\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--min-segment-size\",\"separator\":\" \"}},\"max_segment_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--max-segment-size\",\"separator\":\" \",\"order\":7}},\"p_value\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--p-value\",\"order\":8,\"separator\":\" \"}},\"data_ratio\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--data-ratio\",\"order\":9}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar VarScan.v2.3.7.jar copynumber\"],\"stdout\":\"\",\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":2}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber:latest\",\"imageId\":\"80d67a58c9cd1fad34225aed76228059bcd685c50b7e38e6ffc1f9cf54720423\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "549d97329f934077618e08ad",
                                "__v": 0,
                                "version": 5
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"80d67a58c9cd\",\"uri\":\"VarScan2_CopyNumber:latest\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar VarScan.v2.3.7.jar copynumber\"]},\"outputs\":{\"properties\":{\"CopyNumber\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"data_ratio\":{\"adapter\":{\"order\":9,\"prefix\":\"--data-ratio\"},\"type\":\"number\"},\"p_value\":{\"adapter\":{\"separator\":\" \",\"order\":8,\"prefix\":\"--p-value\"},\"type\":\"number\"},\"max_segment_size\":{\"adapter\":{\"order\":7,\"separator\":\" \",\"prefix\":\"--max-segment-size\"},\"type\":\"integer\"},\"min_segment_size\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-segment-size\",\"order\":6},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":5,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"min_map_quality\":{\"adapter\":{\"prefix\":\"--min-map-qual\",\"order\":4},\"type\":\"integer\"},\"min_base_quality\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-base-qual\",\"order\":3},\"type\":\"integer\"},\"Tumor\":{\"adapter\":{\"order\":1},\"type\":\"file\"},\"Normal\":{\"adapter\":{\"order\":0},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "549d96919f934077618e08aa",
                                "__v": 0,
                                "version": 4
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\"],\"properties\":{\"Normal\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"Tumor\":{\"type\":\"file\",\"adapter\":{\"order\":1}},\"min_base_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":3,\"prefix\":\"--min-base-qual\",\"separator\":\" \"}},\"min_map_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":4,\"prefix\":\"--min-map-qual\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":5}},\"min_segment_size\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--min-segment-size\",\"separator\":\" \"}},\"max_segment_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--max-segment-size\",\"separator\":\" \",\"order\":7}},\"p_value\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--p-value\",\"order\":8,\"separator\":\" \"}},\"data_ratio\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--data-ratio\",\"order\":9}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar VarScan.v2.3.7.jar copynumber\"],\"stdout\":\"\",\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":2}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"VarScan2_CopyNumber\",\"imageId\":\"80d67a58c9cd\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "549d95ff9f934077618e08a9",
                                "__v": 0,
                                "version": 3
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"@type\":\"CommandLine\",\"requirements\":{\"resources\":{\"network\":false,\"diskSpace\":0,\"ports\":[],\"mem\":0,\"cpu\":0},\"environment\":{\"container\":{\"imageId\":\"80d67a58c9cd\",\"uri\":\"VarScan2 CopyNumber\",\"type\":\"docker\"}}},\"adapter\":{\"args\":[{\"order\":2,\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"separator\":\" \"}],\"stdout\":\"\",\"baseCmd\":[\"java -jar VarScan.v2.3.7.jar copynumber\"]},\"outputs\":{\"properties\":{\"CopyNumber\":{\"adapter\":{\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}},\"type\":\"file\"}},\"required\":[\"sam\"],\"type\":\"object\"},\"inputs\":{\"properties\":{\"data_ratio\":{\"adapter\":{\"order\":9,\"prefix\":\"--data-ratio\"},\"type\":\"number\"},\"p_value\":{\"adapter\":{\"separator\":\" \",\"order\":8,\"prefix\":\"--p-value\"},\"type\":\"number\"},\"max_segment_size\":{\"adapter\":{\"order\":7,\"separator\":\" \",\"prefix\":\"--max-segment-size\"},\"type\":\"integer\"},\"min_segment_size\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-segment-size\",\"order\":6},\"type\":\"integer\"},\"min_coverage\":{\"adapter\":{\"order\":5,\"prefix\":\"--min-coverage\"},\"type\":\"integer\"},\"min_map_quality\":{\"adapter\":{\"prefix\":\"--min-map-qual\",\"order\":4},\"type\":\"integer\"},\"min_base_quality\":{\"adapter\":{\"separator\":\" \",\"prefix\":\"--min-base-qual\",\"order\":3},\"type\":\"integer\"},\"Tumor\":{\"adapter\":{\"order\":1},\"type\":\"file\"},\"Normal\":{\"adapter\":{\"order\":0},\"type\":\"file\"}},\"required\":[\"reference\",\"reads\"],\"type\":\"object\"},\"documentAuthor\":\"tziotas\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "549d94ed9f934077618e08a8",
                                "__v": 0,
                                "version": 2
                            },
                            {
                                "app_id": "549d935a9f934077618e08a6",
                                "json": "{\"name\":\"Varscan2 CopyNumber\",\"schema\":\"https://github.com/common-workflow-language/common-workflow-language/blob/draft-1/specification/tool-description.md\",\"description\":\"\",\"documentAuthor\":\"tziotas\",\"inputs\":{\"type\":\"object\",\"required\":[\"reference\",\"reads\"],\"properties\":{\"Normal\":{\"type\":\"file\",\"adapter\":{\"order\":0}},\"Tumor\":{\"type\":\"file\",\"adapter\":{\"order\":1}},\"min_base_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":3,\"prefix\":\"--min-base-qual\",\"separator\":\" \"}},\"min_map_quality\":{\"type\":\"integer\",\"adapter\":{\"order\":4,\"prefix\":\"--min-map-qual\"}},\"min_coverage\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--min-coverage\",\"order\":5}},\"min_segment_size\":{\"type\":\"integer\",\"adapter\":{\"order\":6,\"prefix\":\"--min-segment-size\",\"separator\":\" \"}},\"max_segment_size\":{\"type\":\"integer\",\"adapter\":{\"prefix\":\"--max-segment-size\",\"separator\":\" \",\"order\":7}},\"p_value\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--p-value\",\"order\":8,\"separator\":\" \"}},\"data_ratio\":{\"type\":\"number\",\"adapter\":{\"prefix\":\"--data-ratio\",\"order\":9}}}},\"outputs\":{\"type\":\"object\",\"required\":[\"sam\"],\"properties\":{\"CopyNumber\":{\"type\":\"file\",\"adapter\":{\"metadata\":{},\"glob\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n\\t//-----------------------------------------------------\\n \\n \\tretval = basename.concat('copynumber')\\n    \\n\\t//-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"}}}}},\"adapter\":{\"baseCmd\":[\"java -jar VarScan.v2.3.7.jar copynumber\"],\"stdout\":\"\",\"args\":[{\"separator\":\" \",\"value\":{\"$expr\":\"{\\n\\tfile = $job.inputs.Normal.path\\n\\tfile_split = file.split('.')\\n\\textension = file_split.slice(file_split.length-1)\\n\\tbasename = file_split.slice(0, file_split.length-1)\\n    //-----------------------------------------------------\\n \\n \\tretval = basename\\n    \\n    //-----------------------------------------------------\\n\\treturn retval.join('.').replace(/^.*[\\\\\\\\\\\\/]/, '')\\n}\"},\"order\":2}]},\"requirements\":{\"environment\":{\"container\":{\"type\":\"docker\",\"uri\":\"varscan2-copynumber\",\"imageId\":\"7fa721d17673\"}},\"resources\":{\"cpu\":0,\"mem\":0,\"ports\":[],\"diskSpace\":0,\"network\":false}},\"@type\":\"CommandLine\"}",
                                "author": "tziotas",
                                "description": "",
                                "name": "Varscan2 CopyNumber",
                                "_id": "549d935a9f934077618e08a7",
                                "__v": 0,
                                "version": 1
                            }
                        ]
                    }
                ],
                "StarvingMarvin/samtools": [
                    {
                        "user": "547c7aaafd79e7f979392687",
                        "repo": {
                            "git": false,
                            "secret": "73b072e7-76a6-4e77-8555-251fe341580c",
                            "user": "547c7aaafd79e7f979392687",
                            "created_by": "StarvingMarvin",
                            "owner": "StarvingMarvin",
                            "name": "samtools",
                            "_id": "547c7b20fd79e7f979392688",
                            "__v": 0,
                            "is_public": true
                        },
                        "name": "mpileup",
                        "_id": "547c7b69fd79e7f979392689",
                        "is_script": false,
                        "revisions": [
                            {
                                "app_id": "547c7b69fd79e7f979392689",
                                "json": {
                                    "softwareDescription": {
                                        "repo_owner": "sinisa88",
                                        "name": "samtools mpileup",
                                        "appVersion": "1.1.18"
                                    },
                                    "documentAuthor": "StarvingMarvin",
                                    "requirements": {
                                        "environment": {
                                            "container": {
                                                "type": "docker",
                                                "uri": "docker://samtools#latest",
                                                "imageId": "4b41a079614a"
                                            }
                                        },
                                        "resources": {
                                            "cpu": 0,
                                            "mem": 5000,
                                            "ports": [],
                                            "diskSpace": 0,
                                            "network": false
                                        }
                                    },
                                    "inputs": {
                                        "type": "object",
                                        "required": [
                                            "bam"
                                        ],
                                        "properties": {
                                            "bam": {
                                                "type": "array",
                                                "minItems": 1,
                                                "maxItems": 0,
                                                "required": true,
                                                "items": {
                                                    "type": "file"
                                                },
                                                "adapter": {
                                                    "order": 2,
                                                    "listStreamable": true,
                                                    "listSeparator": "_"
                                                }
                                            },
                                            "quality": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-6",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "count_anomalous_read_pairs": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-A",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "disable_BAQ_computation": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-B",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "list_of_input_BAM_filenames": {
                                                "type": "file",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-b",
                                                    "order": 1,
                                                    "streamable": false
                                                },
                                                "required": false
                                            },
                                            "parameter_for_adjusting_mapQ": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-C",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "max_per_BAM_depth_to_avoid_excessive_memory_usage": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-d",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "recalculate_extended_BAQ_on_the_fly_thus_ignoring_existing_BQs": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-E",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "faidx_indexed_reference_sequence_file": {
                                                "type": "file",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-f",
                                                    "order": 1,
                                                    "streamable": false
                                                },
                                                "required": false
                                            },
                                            "exclude_read_groups_listed_in_FILE": {
                                                "type": "file",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-G",
                                                    "order": 1,
                                                    "streamable": false
                                                },
                                                "required": false
                                            },
                                            "list_of_positions_chr_pos_or_regions_BED": {
                                                "type": "file",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-l",
                                                    "order": 1,
                                                    "streamable": false
                                                },
                                                "required": false
                                            },
                                            "ignore_RG_tags": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-R",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "skip_alignments_with_mapQ_smaller_than_INT": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-q",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "skip_bases_with_baseQ_BAQ_smaller_than_INT": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-Q",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "required_flags_skip_reads_with_mask_bits_unset": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "--rf",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "output_per_sample_DP_in_BCF": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-D",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "generate_BCF_output": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-g",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "output_base_positions_on_reads": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-O",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "output_mapping_quality": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-s",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "output_per_sample_strand_bias_P_value_in_BCF": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-S",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "filter_flags_skip_reads_with_mask_bits_set": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "--ff",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "minimum_fraction_of_gapped_reads_for_candidates": {
                                                "type": "number",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-F",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "do_not_perform_indel_calling": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-I",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "max_per_sample_depth_for_INDEL_calling": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-L",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "minimum_gapped_reads_for_indel_candidates": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-m",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "generate_uncompress_BCF_output": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-u",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "Phred_scaled_gap_extension_seq_error_probability": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-e",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "Phred_scaled_gap_open_sequencing_error_probability": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-o",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "apply_m_and_F_per_sample_to_increase_sensitivity": {
                                                "type": "boolean",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-p",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "cap_mapping_quality_at_INT": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-M",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "coefficient_for_homopolymer_errors": {
                                                "type": "integer",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-h",
                                                    "order": 1
                                                },
                                                "required": false
                                            },
                                            "region_in_which_pileup_is_generated": {
                                                "type": "string",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-r",
                                                    "order": 1
                                                }
                                            },
                                            "comma_separated_list_of_platforms_for_indels": {
                                                "type": "array",
                                                "adapter": {
                                                    "separator": "_",
                                                    "prefix": "-p",
                                                    "order": 1,
                                                    "listSeparator": ","
                                                },
                                                "required": false,
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "outputs": {
                                        "type": "object",
                                        "properties": {
                                            "out": {
                                                "type": "array",
                                                "adapter": {
                                                    "glob": "output.txt",
                                                    "stdout": true,
                                                    "meta": {
                                                        "__inherit__": "bam",
                                                        "file_type": {
                                                            "expr": {
                                                                "value": "{if($job.inputs.generate_uncompress_BCF_output === true) {return 'bcf'} else {return 'txt'}}",
                                                                "lang": "javascript"
                                                            }
                                                        }
                                                    }
                                                },
                                                "items": {
                                                    "type": "file"
                                                }
                                            }
                                        }
                                    },
                                    "adapter": {
                                        "baseCmd": [
                                            "/opt/samtools-1.1/samtools"
                                        ],
                                        "stdout": "output.txt",
                                        "args": [
                                            {
                                                "order": 0,
                                                "prefix": "",
                                                "separator": " ",
                                                "value": "mpileup"
                                            }
                                        ]
                                    },
                                    "name": "mpileup"
                                },
                                "author": "StarvingMarvin",
                                "name": "mpileup",
                                "_id": "547c7b69fd79e7f97939268a",
                                "__v": 0,
                                "version": 1
                            }
                        ]
                    }
                ]
            },
            "scripts": {}
        }
    }
}